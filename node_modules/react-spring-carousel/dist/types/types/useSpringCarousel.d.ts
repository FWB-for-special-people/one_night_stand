import { ReactNode } from 'react';
import { SpringConfig } from 'react-spring';
import { PrepareThumbsData, UseListenToCustomEvent } from './index';
export declare type UseSpringCarouselBaseProps = {
    disableGestures?: boolean;
    draggingSlideTreshold?: number;
    slideWhenThresholdIsReached?: boolean;
    springConfig?: Omit<SpringConfig, 'velocity'>;
    carouselSlideAxis?: 'x' | 'y';
    gutter?: number;
    shouldResizeOnWindowResize?: boolean;
};
/**
 * Types based on withThums prop
 */
export declare type ReactSpringCarouselItem = {
    id: string;
    renderItem: ReactNode;
    renderThumb?: never;
};
export declare type ReactSpringCarouselItemWithThumbs = {
    id: string;
    renderItem: ReactNode;
    renderThumb: ReactNode;
};
export declare type UseSpringCarouselWithThumbs = {
    withThumbs?: true;
    thumbsSlideAxis?: 'x' | 'y';
    items: ReactSpringCarouselItemWithThumbs[];
    enableThumbsWrapperScroll?: boolean;
    prepareThumbsData?: PrepareThumbsData;
};
export declare type UseSpringCarouselWithNoThumbs = {
    withThumbs?: false;
    items: ReactSpringCarouselItem[];
    thumbsSlideAxis?: never;
    enableThumbsWrapperScroll?: never;
    prepareThumbsData?: never;
};
export declare type ThumbsProps = UseSpringCarouselWithThumbs | UseSpringCarouselWithNoThumbs;
/**
 * Types based on slideType
 */
export declare type UseSpringCarouselFluidType = {
    slideType: 'fluid';
    slideAmount?: number;
    freeScroll?: boolean;
    enableFreeScrollDrag?: boolean | (() => boolean);
    itemsPerSlide?: never;
    initialActiveItem?: never;
    initialStartingPosition?: never;
};
export declare type UseSpringCarouselFixedSlideType = {
    slideType?: 'fixed';
    itemsPerSlide?: number;
    initialActiveItem?: number;
    slideAmount?: never;
    initialStartingPosition?: 'start' | 'center' | 'end';
    freeScroll?: never;
    enableFreeScrollDrag?: never;
};
declare type SlideTypes = UseSpringCarouselFluidType | UseSpringCarouselFixedSlideType;
/**
 * Types based on gestures activation
 */
export declare type DisableGesturesProps = {
    disableGestures?: true;
    touchAction?: never;
};
export declare type EnableGesturesProps = {
    disableGestures?: false;
    touchAction?: string;
};
export declare type Gestures = DisableGesturesProps | EnableGesturesProps;
/**
 * Types based on loop functionality
 */
export declare type WithLoopProps = {
    withLoop?: true;
    initialStartingPosition?: 'start' | 'center' | 'end';
    startEndGutter?: number;
};
export declare type WithNoLoop = {
    withLoop?: false;
    initialStartingPosition?: never;
    startEndGutter?: never;
};
declare type LoopProps = WithLoopProps | WithNoLoop;
export declare type UseSpringCarouselProps = UseSpringCarouselBaseProps & ThumbsProps & SlideTypes & Gestures & LoopProps;
export declare type UseSpringFluidSlideTypeReturnProps = {
    carouselFragment: ReactNode;
    thumbsFragment: ReactNode;
    useListenToCustomEvent: UseListenToCustomEvent<'use-spring'>;
    getIsFullscreen(): boolean;
    getIsPrevItem(id: string): boolean;
    getIsNextItem(id: string): boolean;
    enterFullscreen(elementRef?: HTMLElement): void;
    exitFullscreen(): void;
    slideToNextItem(): void;
    slideToPrevItem(): void;
    getIsAnimating(): boolean;
    getIsDragging(): boolean;
};
export declare type UseSpringFixedSlideTypeReturnProps = {
    carouselFragment: ReactNode;
    thumbsFragment: ReactNode;
    useListenToCustomEvent: UseListenToCustomEvent<'use-spring'>;
    getIsFullscreen(): boolean;
    getIsPrevItem(id: string): boolean;
    getIsNextItem(id: string): boolean;
    enterFullscreen(elementRef?: HTMLElement): void;
    exitFullscreen(): void;
    slideToNextItem(): void;
    slideToPrevItem(): void;
    getIsAnimating(): boolean;
    slideToItem(item: string | number): void;
    getIsActiveItem(id: string): boolean;
    getIsDragging(): boolean;
    getCurrentActiveItem(): {
        id: string;
        index: number;
    };
};
export {};
