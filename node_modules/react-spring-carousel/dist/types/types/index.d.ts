import { FullGestureState } from '@use-gesture/react';
import { ReactSpringCarouselItemWithThumbs } from './useSpringCarousel';
export declare type PrepareThumbsData = (items: Omit<ReactSpringCarouselItemWithThumbs, 'renderItem'>[]) => Omit<ReactSpringCarouselItemWithThumbs, 'renderItem'>[];
export declare type SlideToItemFnProps = {
    from?: number;
    to?: number;
    newIndex?: number;
    immediate?: boolean;
    customTo?: number;
    velocity?: number[];
    onRest?(): void;
};
export declare type SlideActionType = 'prev' | 'next';
declare type OnSlideStartChange = {
    eventName: 'onSlideStartChange';
    slideActionType: SlideActionType;
    nextItem: {
        index: number;
        id: string;
    };
};
declare type OnSlideChange = {
    eventName: 'onSlideChange';
    slideActionType: SlideActionType;
    currentItem: {
        index: number;
        id: string;
    };
};
declare type OnDrag = Omit<FullGestureState<'drag'>, 'event'> & {
    eventName: 'onDrag';
    slideActionType: SlideActionType;
};
declare type OnFullscreenChange = {
    eventName: 'onFullscreenChange';
    isFullscreen: boolean;
};
declare type OnLeftSwipe = {
    eventName: 'onLeftSwipe';
};
declare type OnRightSwipe = {
    eventName: 'onRightSwipe';
};
export declare type UseSpringCarouselEventsObservableProps = OnSlideStartChange | OnSlideChange | OnDrag | OnFullscreenChange;
export declare type UseTransitionCarouselEventsObservableProps = OnSlideStartChange | OnSlideChange | OnFullscreenChange | OnLeftSwipe | OnRightSwipe;
declare type CombinedProps<T> = T extends 'use-spring' ? UseSpringCarouselEventsObservableProps : UseTransitionCarouselEventsObservableProps;
export declare type EmitObservableFn<T> = (data: CombinedProps<T>) => void;
export declare type ObservableCallbackFn<T> = (data: CombinedProps<T>) => void;
export declare type UseListenToCustomEvent<T> = (fn: ObservableCallbackFn<T>) => void;
export * from './useSpringCarousel';
export * from './useTransitionCarousel';
