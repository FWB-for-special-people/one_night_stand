{"version":3,"file":"index3.js","sources":["../../src/useTransitionCarousel/index.tsx"],"sourcesContent":["import { createContext, useRef, useState, useContext } from 'react'\nimport { useTransition, animated, config } from 'react-spring'\nimport { useDrag } from '@use-gesture/react'\nimport { useCustomEventsModule, useThumbsModule, useFullscreenModule } from '../modules'\nimport { SlideActionType } from '../types'\nimport {\n  UseTransitionCarouselContextProps,\n  UseTransitionCarouselProps,\n} from '../types/useTransitionCarousel'\nimport { ReactSpringCarouselItemWithThumbs } from '../types/useSpringCarousel'\n\nconst UseTransitionCarouselContext = createContext<\n  UseTransitionCarouselContextProps | undefined\n>(undefined)\n\nfunction useTransitionCarouselContext() {\n  const context = useContext(UseTransitionCarouselContext)\n\n  if (!context) {\n    throw new Error(`useTransitionCarouselContext isn't being used within the useTransitionCarousel context; \n    use the context only inside a component that is rendered within the Carousel.`)\n  }\n\n  return context\n}\n\nfunction useTransitionCarousel({\n  items,\n  withLoop = false,\n  withThumbs = false,\n  springConfig = config.default,\n  thumbsSlideAxis = 'x',\n  enableThumbsWrapperScroll = true,\n  draggingSlideTreshold = 50,\n  prepareThumbsData,\n  toPrevItemSpringProps,\n  toNextItemSpringProps,\n  disableGestures = false,\n  trail,\n  exitBeforeEnter = false,\n  springAnimationProps = {\n    initial: {\n      opacity: 1,\n      position: 'absolute',\n    },\n    from: {\n      opacity: 0,\n      position: 'absolute',\n    },\n    enter: {\n      opacity: 1,\n      position: 'absolute',\n    },\n    leave: {\n      opacity: 0,\n      position: 'absolute',\n    },\n  },\n}: UseTransitionCarouselProps) {\n  const slideActionType = useRef<SlideActionType>('next')\n  const mainCarouselWrapperRef = useRef<HTMLDivElement | null>(null)\n  const isAnimating = useRef(false)\n  const [activeItem, setActiveItem] = useState(0)\n\n  const { emitObservable, useListenToCustomEvent } =\n    useCustomEventsModule<'use-transition'>()\n  const { enterFullscreen, exitFullscreen, getIsFullscreen } = useFullscreenModule({\n    emitObservable,\n    mainCarouselWrapperRef,\n  })\n  const { thumbsFragment: _thumbsFragment, handleThumbsScroll } = useThumbsModule({\n    items: items as ReactSpringCarouselItemWithThumbs[],\n    withThumbs,\n    thumbsSlideAxis,\n    springConfig,\n    prepareThumbsData,\n    slideType: 'fixed',\n  })\n\n  const bindSwipe = useDrag(\n    ({ last, movement: [mx] }) => {\n      if (getIsAnimating()) {\n        return\n      }\n\n      if (last) {\n        const prevItemTreshold = mx > draggingSlideTreshold\n        const nextItemTreshold = mx < -draggingSlideTreshold\n        const isFirstItem = activeItem === 0\n        const isLastItem = activeItem === items.length - 1\n\n        if (nextItemTreshold) {\n          if (!withLoop && isLastItem) {\n            return\n          }\n\n          slideToNextItem()\n          emitObservable({\n            eventName: 'onLeftSwipe',\n          })\n        } else if (prevItemTreshold) {\n          if (!withLoop && isFirstItem) {\n            return\n          }\n\n          slideToPrevItem()\n          emitObservable({\n            eventName: 'onRightSwipe',\n          })\n        }\n      }\n    },\n    {\n      enabled: !disableGestures,\n    },\n  )\n\n  function getTransitionConfig() {\n    const slideActionType = getSlideActionType()\n\n    if (slideActionType === 'prev' && toPrevItemSpringProps) {\n      return {\n        initial: {\n          ...springAnimationProps.initial,\n        },\n        from: {\n          ...toPrevItemSpringProps.from,\n        },\n        enter: {\n          ...toPrevItemSpringProps.enter,\n        },\n        leave: {\n          ...toPrevItemSpringProps.leave,\n        },\n      }\n    }\n\n    if (slideActionType === 'next' && toNextItemSpringProps) {\n      return {\n        initial: {\n          ...springAnimationProps.initial,\n        },\n        from: {\n          ...toNextItemSpringProps.from,\n        },\n        enter: {\n          ...toNextItemSpringProps.enter,\n        },\n        leave: {\n          ...toNextItemSpringProps.leave,\n        },\n      }\n    }\n\n    return {\n      initial: {\n        ...springAnimationProps.initial,\n      },\n      from: {\n        ...springAnimationProps.from,\n      },\n      enter: {\n        ...springAnimationProps.enter,\n      },\n      leave: {\n        ...springAnimationProps.leave,\n      },\n    }\n  }\n\n  const transitions = useTransition(activeItem, {\n    config: springConfig,\n    ...getTransitionConfig(),\n    onStart: () => setIsAnimating(true),\n    trail,\n    exitBeforeEnter,\n    key: items[activeItem].id,\n    onRest: val => {\n      if (val.finished) {\n        setIsAnimating(false)\n        emitObservable({\n          eventName: 'onSlideChange',\n          slideActionType: getSlideActionType(),\n          currentItem: {\n            index: activeItem,\n            id: items[activeItem].id,\n          },\n        })\n      }\n    },\n  })\n  const itemsFragment = transitions((styles, item) => (\n    <animated.div\n      style={{\n        ...styles,\n        flex: '1 0 100%',\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      {items[item].renderItem}\n    </animated.div>\n  ))\n\n  function getIsAnimating() {\n    return isAnimating.current\n  }\n  function setIsAnimating(val: boolean) {\n    isAnimating.current = val\n  }\n  function setSlideActionType(type: SlideActionType) {\n    slideActionType.current = type\n  }\n  function getSlideActionType() {\n    return slideActionType.current\n  }\n  function slideToItem(item: string | number) {\n    let itemIndex = 0\n\n    if (typeof item === 'string') {\n      itemIndex = items.findIndex(_item => _item.id === item)\n    } else {\n      itemIndex = item\n    }\n\n    if (itemIndex >= items.length) {\n      throw Error(\n        `The item you want to slide to doesn't exist. This could be due to the fact that \n        you provide a wrong id or a higher numeric index.`,\n      )\n    }\n\n    if (itemIndex === activeItem) {\n      return\n    }\n\n    const currentItem = findItemIndex(items[activeItem].id)\n    const newActiveItem = findItemIndex(items[itemIndex].id)\n\n    emitObservable({\n      eventName: 'onSlideStartChange',\n      slideActionType: getSlideActionType(),\n      nextItem: {\n        index: newActiveItem,\n        id: items[itemIndex].id,\n      },\n    })\n\n    if (newActiveItem > currentItem) {\n      setSlideActionType('next')\n    } else {\n      setSlideActionType('prev')\n    }\n\n    setActiveItem(itemIndex)\n\n    if (enableThumbsWrapperScroll && withThumbs) {\n      handleThumbsScroll(itemIndex)\n    }\n  }\n  function slideToNextItem() {\n    const isLastItem = activeItem === items.length - 1\n\n    if (withLoop) {\n      setSlideActionType('next')\n      if (isLastItem) {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: 0,\n            id: items[0].id,\n          },\n        })\n        setActiveItem(0)\n      } else {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: activeItem + 1,\n            id: items[activeItem + 1].id,\n          },\n        })\n        setActiveItem(activeItem + 1)\n      }\n    } else {\n      if (!isLastItem) {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: activeItem + 1,\n            id: items[activeItem + 1].id,\n          },\n        })\n        setSlideActionType('next')\n        setActiveItem(activeItem + 1)\n      }\n    }\n  }\n  function slideToPrevItem() {\n    const isFirstItem = activeItem === 0\n\n    if (withLoop) {\n      setSlideActionType('prev')\n      if (isFirstItem) {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: items.length - 1,\n            id: items[items.length - 1].id,\n          },\n        })\n\n        setActiveItem(items.length - 1)\n      } else {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: activeItem - 1,\n            id: items[activeItem - 1].id,\n          },\n        })\n        setActiveItem(activeItem - 1)\n      }\n    } else {\n      if (!isFirstItem) {\n        setSlideActionType('prev')\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: activeItem - 1,\n            id: items[activeItem - 1].id,\n          },\n        })\n        setActiveItem(activeItem - 1)\n      }\n    }\n  }\n  function findItemIndex(id: string) {\n    return items.findIndex(item => item.id === id)\n  }\n  function getIsNextItem(id: string) {\n    const itemIndex = findItemIndex(id)\n\n    if (withLoop && activeItem === items.length - 1) {\n      return itemIndex === 0\n    }\n\n    return itemIndex === activeItem + 1\n  }\n  function getIsPrevItem(id: string) {\n    const itemIndex = findItemIndex(id)\n\n    if (withLoop && activeItem === 0) {\n      return itemIndex === items.length - 1\n    }\n\n    return itemIndex === activeItem - 1\n  }\n\n  const contextProps: UseTransitionCarouselContextProps = {\n    activeItem,\n    slideToItem,\n    slideToNextItem,\n    slideToPrevItem,\n    enterFullscreen,\n    exitFullscreen,\n    useListenToCustomEvent,\n    getIsNextItem,\n    getIsPrevItem,\n    getIsAnimating,\n    getIsFullscreen,\n    getIsActiveItem: id => {\n      return findItemIndex(id) === activeItem\n    },\n    getCurrentActiveItem: () => ({\n      id: items[activeItem].id,\n      index: activeItem,\n    }),\n  }\n\n  const carouselFragment = (\n    <UseTransitionCarouselContext.Provider value={contextProps}>\n      <div\n        ref={mainCarouselWrapperRef}\n        {...bindSwipe()}\n        style={{\n          display: 'flex',\n          position: 'relative',\n          width: '100%',\n          height: '100%',\n          overflow: 'hidden',\n        }}\n      >\n        {itemsFragment}\n      </div>\n    </UseTransitionCarouselContext.Provider>\n  )\n\n  const thumbsFragment = (\n    <UseTransitionCarouselContext.Provider value={contextProps}>\n      {_thumbsFragment}\n    </UseTransitionCarouselContext.Provider>\n  )\n\n  return {\n    carouselFragment,\n    thumbsFragment,\n    ...contextProps,\n  }\n}\n\nexport { useTransitionCarouselContext, useTransitionCarousel }\n"],"names":["UseTransitionCarouselContext","createContext","undefined","useTransitionCarouselContext","context","useContext","Error","useTransitionCarousel","items","withLoop","withThumbs","springConfig","config","default","thumbsSlideAxis","enableThumbsWrapperScroll","draggingSlideTreshold","prepareThumbsData","toPrevItemSpringProps","toNextItemSpringProps","disableGestures","trail","exitBeforeEnter","springAnimationProps","initial","opacity","position","from","enter","leave","slideActionType","useRef","mainCarouselWrapperRef","isAnimating","activeItem","setActiveItem","useState","emitObservable","useListenToCustomEvent","useCustomEventsModule","enterFullscreen","exitFullscreen","getIsFullscreen","useFullscreenModule","thumbsFragment","_thumbsFragment","handleThumbsScroll","useThumbsModule","slideType","bindSwipe","useDrag","last","movement","mx","getIsAnimating","prevItemTreshold","nextItemTreshold","isFirstItem","isLastItem","length","slideToNextItem","eventName","slideToPrevItem","enabled","itemsFragment","useTransition","getSlideActionType","getTransitionConfig","onStart","setIsAnimating","key","id","onRest","val","finished","currentItem","index","transitions","styles","item","_jsx","animated","div","style","flex","width","height","renderItem","current","setSlideActionType","type","nextItem","findItemIndex","findIndex","contextProps","slideToItem","itemIndex","_item","newActiveItem","getIsNextItem","getIsPrevItem","getIsActiveItem","getCurrentActiveItem","carouselFragment","Provider","value","ref","display","overflow"],"mappings":"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"}