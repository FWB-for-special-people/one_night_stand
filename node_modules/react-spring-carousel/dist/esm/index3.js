import{jsx as e}from"react/jsx-runtime";import{createContext as t,useContext as n,useRef as i,useState as r}from"react";import{config as s,useTransition as o,animated as a}from"react-spring";import{useDrag as l}from"@use-gesture/react";import{a as d,b as c,c as u}from"./useThumbsModule-0944decf.js";import"rxjs";import"screenfull";const m=t(void 0);function g(){const e=n(m);if(!e)throw new Error("useTransitionCarouselContext isn't being used within the useTransitionCarousel context; \n    use the context only inside a component that is rendered within the Carousel.");return e}function h({items:t,withLoop:n=!1,withThumbs:g=!1,springConfig:h=s.default,thumbsSlideAxis:p="x",enableThumbsWrapperScroll:f=!0,draggingSlideTreshold:b=50,prepareThumbsData:x,toPrevItemSpringProps:v,toNextItemSpringProps:I,disableGestures:T=!1,trail:S,exitBeforeEnter:j=!1,springAnimationProps:O={initial:{opacity:1,position:"absolute"},from:{opacity:0,position:"absolute"},enter:{opacity:1,position:"absolute"},leave:{opacity:0,position:"absolute"}}}){const y=i("next"),C=i(null),w=i(!1),[A,N]=r(0),{emitObservable:F,useListenToCustomEvent:P}=d(),{enterFullscreen:E,exitFullscreen:L,getIsFullscreen:R}=c({emitObservable:F,mainCarouselWrapperRef:C}),{thumbsFragment:B,handleThumbsScroll:D}=u({items:t,withThumbs:g,thumbsSlideAxis:p,springConfig:h,prepareThumbsData:x,slideType:"fixed"}),W=l((({last:e,movement:[i]})=>{if(!G()&&e){const e=i>b,r=i<-b,s=0===A,o=A===t.length-1;if(r){if(!n&&o)return;H(),F({eventName:"onLeftSwipe"})}else if(e){if(!n&&s)return;J(),F({eventName:"onRightSwipe"})}}}),{enabled:!T});const k=o(A,Object.assign(Object.assign({config:h},function(){const e=z();return"prev"===e&&v?{initial:Object.assign({},O.initial),from:Object.assign({},v.from),enter:Object.assign({},v.enter),leave:Object.assign({},v.leave)}:"next"===e&&I?{initial:Object.assign({},O.initial),from:Object.assign({},I.from),enter:Object.assign({},I.enter),leave:Object.assign({},I.leave)}:{initial:Object.assign({},O.initial),from:Object.assign({},O.from),enter:Object.assign({},O.enter),leave:Object.assign({},O.leave)}}()),{onStart:()=>M(!0),trail:S,exitBeforeEnter:j,key:t[A].id,onRest:e=>{e.finished&&(M(!1),F({eventName:"onSlideChange",slideActionType:z(),currentItem:{index:A,id:t[A].id}}))}}))(((n,i)=>e(a.div,Object.assign({style:Object.assign(Object.assign({},n),{flex:"1 0 100%",width:"100%",height:"100%"})},{children:t[i].renderItem}))));function G(){return w.current}function M(e){w.current=e}function q(e){y.current=e}function z(){return y.current}function H(){const e=A===t.length-1;n?(q("next"),e?(F({eventName:"onSlideStartChange",slideActionType:z(),nextItem:{index:0,id:t[0].id}}),N(0)):(F({eventName:"onSlideStartChange",slideActionType:z(),nextItem:{index:A+1,id:t[A+1].id}}),N(A+1))):e||(F({eventName:"onSlideStartChange",slideActionType:z(),nextItem:{index:A+1,id:t[A+1].id}}),q("next"),N(A+1))}function J(){const e=0===A;n?(q("prev"),e?(F({eventName:"onSlideStartChange",slideActionType:z(),nextItem:{index:t.length-1,id:t[t.length-1].id}}),N(t.length-1)):(F({eventName:"onSlideStartChange",slideActionType:z(),nextItem:{index:A-1,id:t[A-1].id}}),N(A-1))):e||(q("prev"),F({eventName:"onSlideStartChange",slideActionType:z(),nextItem:{index:A-1,id:t[A-1].id}}),N(A-1))}function K(e){return t.findIndex((t=>t.id===e))}const Q={activeItem:A,slideToItem:function(e){let n=0;if(n="string"==typeof e?t.findIndex((t=>t.id===e)):e,n>=t.length)throw Error("The item you want to slide to doesn't exist. This could be due to the fact that \n        you provide a wrong id or a higher numeric index.");if(n===A)return;const i=K(t[A].id),r=K(t[n].id);F({eventName:"onSlideStartChange",slideActionType:z(),nextItem:{index:r,id:t[n].id}}),q(r>i?"next":"prev"),N(n),f&&g&&D(n)},slideToNextItem:H,slideToPrevItem:J,enterFullscreen:E,exitFullscreen:L,useListenToCustomEvent:P,getIsNextItem:function(e){const i=K(e);return n&&A===t.length-1?0===i:i===A+1},getIsPrevItem:function(e){const i=K(e);return n&&0===A?i===t.length-1:i===A-1},getIsAnimating:G,getIsFullscreen:R,getIsActiveItem:e=>K(e)===A,getCurrentActiveItem:()=>({id:t[A].id,index:A})},U=e(m.Provider,Object.assign({value:Q},{children:e("div",Object.assign({ref:C},W(),{style:{display:"flex",position:"relative",width:"100%",height:"100%",overflow:"hidden"}},{children:k}))})),V=e(m.Provider,Object.assign({value:Q},{children:B}));return Object.assign({carouselFragment:U,thumbsFragment:V},Q)}export{h as useTransitionCarousel,g as useTransitionCarouselContext};
//# sourceMappingURL=index3.js.map
