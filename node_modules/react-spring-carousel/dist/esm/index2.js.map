{"version":3,"file":"index2.js","sources":["../../src/useSpringCarousel/index.tsx"],"sourcesContent":["import { useRef, createContext, useContext } from 'react'\nimport { useSpring, config, animated } from 'react-spring'\nimport { useDrag } from '@use-gesture/react'\nimport { useCustomEventsModule, useFullscreenModule, useThumbsModule } from '../modules'\nimport {\n  SlideToItemFnProps,\n  SlideActionType,\n  UseSpringFixedSlideTypeReturnProps,\n} from '../types'\nimport { useIsomorphicLayoutEffect, useIsomorphicMount } from '../utils'\nimport {\n  UseSpringCarouselProps,\n  ReactSpringCarouselItemWithThumbs,\n  UseSpringFluidSlideTypeReturnProps,\n  UseSpringCarouselBaseProps,\n  UseSpringCarouselWithThumbs,\n  UseSpringCarouselFluidType,\n  DisableGesturesProps,\n  WithLoopProps,\n  UseSpringCarouselWithNoThumbs,\n  EnableGesturesProps,\n  WithNoLoop,\n  UseSpringCarouselFixedSlideType,\n} from '../types/useSpringCarousel'\n\ntype ReturnType<T> = T extends 'fixed'\n  ? UseSpringFixedSlideTypeReturnProps\n  : UseSpringFluidSlideTypeReturnProps\ntype ContextTypes<T> = Omit<ReturnType<T>, 'carouselFragment' | 'thumbsFragment'>\n\nconst Context = createContext<ContextTypes<'fixed' | 'fluid'> | undefined>(undefined)\n\nconst defaultDragSpringConfig = {\n  ...config.default,\n  mass: 1,\n  velocity: 0,\n}\n\nfunction useSpringCarousel(\n  props: UseSpringCarouselBaseProps &\n    UseSpringCarouselFluidType &\n    (UseSpringCarouselWithThumbs | UseSpringCarouselWithNoThumbs) &\n    (DisableGesturesProps | EnableGesturesProps) &\n    (WithLoopProps | WithNoLoop),\n): ReturnType<'fluid'>\nfunction useSpringCarousel(\n  props: UseSpringCarouselBaseProps &\n    UseSpringCarouselFixedSlideType &\n    (UseSpringCarouselWithThumbs | UseSpringCarouselWithNoThumbs) &\n    (DisableGesturesProps | EnableGesturesProps) &\n    (WithLoopProps | WithNoLoop),\n): ReturnType<'fixed'>\n\nfunction useSpringCarousel({\n  items,\n  withLoop = false,\n  draggingSlideTreshold,\n  springConfig = config.default,\n  shouldResizeOnWindowResize = true,\n  withThumbs = false,\n  enableThumbsWrapperScroll = true,\n  slideWhenThresholdIsReached = true,\n  carouselSlideAxis = 'x',\n  thumbsSlideAxis = 'x',\n  prepareThumbsData,\n  initialActiveItem = 0,\n  initialStartingPosition,\n  disableGestures = false,\n  gutter = 0,\n  startEndGutter = 0,\n  touchAction,\n  slideAmount,\n  freeScroll = false,\n  enableFreeScrollDrag,\n  itemsPerSlide = 1,\n  slideType = 'fixed',\n}: UseSpringCarouselProps): ReturnType<'fixed' | 'fluid'> {\n  function getItems() {\n    if (withLoop) {\n      if (items.length === itemsPerSlide) {\n        return [...items, ...items, ...items, ...items, ...items]\n      }\n      return [...items, ...items, ...items]\n    }\n    return items\n  }\n\n  const isFirstMount = useRef(true)\n  const slideActionType = useRef<SlideActionType>('initial' as SlideActionType)\n  const internalItems = getItems()\n  const activeItem = useRef(initialActiveItem)\n  const mainCarouselWrapperRef = useRef<HTMLDivElement | null>(null)\n  const carouselTrackWrapperRef = useRef<HTMLDivElement | null>(null)\n  const isDragging = useRef(false)\n  const isAnimating = useRef(false)\n  const windowIsHidden = useRef(false)\n  const fluidTotalWrapperScrollValue = useRef(0)\n  const slideEndReached = useRef(false)\n  const currentWindowWidth = useRef(0)\n  const initialWindowWidth = useRef(0)\n  const prevSlidedValue = useRef(0)\n  const prevItems = useRef(items)\n\n  /**\n   * Instead of raw values, we store it in\n   * useRef for performances reasons during external rerenders\n   */\n  const draggingSlideTresholdRef = useRef<number>(draggingSlideTreshold ?? 0)\n  const itemsPerSlideRef = useRef(itemsPerSlide)\n  const gutterRef = useRef(gutter)\n  const startEndGutterRef = useRef(startEndGutter)\n  const initialActiveItemRef = useRef(initialActiveItem)\n  const initialStartingPositionRef = useRef(initialStartingPosition)\n  const carouselSlideAxisRef = useRef(carouselSlideAxis)\n\n  /**\n   * Update inner values during external rerenders!\n   */\n  itemsPerSlideRef.current = itemsPerSlide\n  gutterRef.current = gutter\n  startEndGutterRef.current = startEndGutter\n  initialActiveItemRef.current = initialActiveItem\n  initialStartingPositionRef.current = initialStartingPosition\n  carouselSlideAxisRef.current = carouselSlideAxis\n\n  const [carouselStyles, setCarouselStyles] = useSpring(() => ({\n    y: 0,\n    x: 0,\n    onChange: ({ value }) => {\n      if (mainCarouselWrapperRef.current && freeScroll) {\n        mainCarouselWrapperRef.current[\n          carouselSlideAxisRef.current === 'x' ? 'scrollLeft' : 'scrollTop'\n        ] = Math.abs(value[carouselSlideAxisRef.current])\n      }\n    },\n  }))\n\n  useIsomorphicLayoutEffect(() => {\n    if (draggingSlideTreshold) {\n      draggingSlideTresholdRef.current = draggingSlideTreshold\n    } else {\n      draggingSlideTresholdRef.current = Math.floor(getSlideValue() / 2 / 2)\n    }\n\n    resize()\n  }, [\n    draggingSlideTreshold,\n    itemsPerSlide,\n    gutter,\n    startEndGutter,\n    initialActiveItem,\n    initialStartingPosition,\n    carouselSlideAxis,\n    thumbsSlideAxis,\n  ])\n\n  function getCarouselItem() {\n    return carouselTrackWrapperRef.current?.querySelector('.use-spring-carousel-item')\n  }\n  function getMainCarouselWrapperWidth() {\n    if (!mainCarouselWrapperRef.current) {\n      throw new Error('mainCarouselWrapperRef is not available')\n    }\n    return mainCarouselWrapperRef.current.getBoundingClientRect()[\n      carouselSlideAxisRef.current === 'x' ? 'width' : 'height'\n    ]\n  }\n  function getCarouselItemWidth() {\n    const carouselItem = getCarouselItem()\n    if (!carouselItem) {\n      throw Error('No carousel items available!')\n    }\n    return (\n      carouselItem.getBoundingClientRect()[\n        carouselSlideAxisRef.current === 'x' ? 'width' : 'height'\n      ] + gutterRef.current\n    )\n  }\n  function getCurrentSlidedValue() {\n    return carouselStyles[carouselSlideAxisRef.current].get()\n  }\n  function getIfItemsNotFillTheCarousel() {\n    return getCarouselItemWidth() * items.length < getMainCarouselWrapperWidth()\n  }\n  function getFluidWrapperScrollValue() {\n    return Math.round(\n      Number(\n        carouselTrackWrapperRef.current?.[\n          carouselSlideAxisRef.current === 'x' ? 'scrollWidth' : 'scrollHeight'\n        ],\n      ) -\n        carouselTrackWrapperRef.current!.getBoundingClientRect()[\n          carouselSlideAxisRef.current === 'x' ? 'width' : 'height'\n        ],\n    )\n  }\n  function getIsFirstItem() {\n    return getCurrentActiveItem() === 0\n  }\n  function getSlideValue() {\n    if (!carouselTrackWrapperRef.current) {\n      return 0\n    }\n    const itemVal = getCarouselItemWidth()\n\n    if (slideType === 'fluid' && typeof slideAmount === 'number') {\n      if (slideAmount < itemVal) {\n        throw new Error('slideAmount must be greater than the width of a single item.')\n      }\n      return slideAmount\n    }\n    return itemVal\n  }\n  function adjustCarouselWrapperPosition(\n    ref: HTMLDivElement,\n    _initialActiveItem?: number,\n  ) {\n    const positionProperty = carouselSlideAxisRef.current === 'x' ? 'left' : 'top'\n    function getDefaultPositionValue() {\n      return getCarouselItemWidth() * items.length\n    }\n    function setPosition(v: number) {\n      if (withLoop) {\n        ref.style.top = '0px'\n        ref.style[positionProperty] = `-${v - startEndGutterRef.current}px`\n      } else {\n        ref.style.left = '0px'\n        ref.style.top = '0px'\n        if (_initialActiveItem && isFirstMount.current) {\n          ref.style[positionProperty] = `calc(-${_initialActiveItem} * 100%)`\n        }\n      }\n    }\n    function setStartPosition() {\n      setPosition(getDefaultPositionValue())\n    }\n\n    if (slideType === 'fixed') {\n      function setCenterPosition(i: number) {\n        setPosition(\n          getDefaultPositionValue() -\n            getSlideValue() * Math.round(((i as number) - 1) / 2),\n        )\n      }\n      function setEndPosition(i: number) {\n        setPosition(\n          getDefaultPositionValue() - getSlideValue() * Math.round((i as number) - 1),\n        )\n      }\n\n      if (itemsPerSlideRef.current > 1) {\n        switch (initialStartingPositionRef.current) {\n          default:\n          case 'start': {\n            setStartPosition()\n            break\n          }\n          case 'center': {\n            setCenterPosition(itemsPerSlideRef.current)\n            break\n          }\n          case 'end': {\n            setEndPosition(itemsPerSlideRef.current)\n            break\n          }\n        }\n      } else {\n        setStartPosition()\n      }\n    } else {\n      setStartPosition()\n    }\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  function resize() {\n    currentWindowWidth.current = window.innerWidth\n\n    if (slideType === 'fluid') {\n      if (getIfItemsNotFillTheCarousel()) {\n        setCarouselStyles.start({\n          immediate: true,\n          [carouselSlideAxisRef.current]: 0,\n        })\n        return\n      }\n      fluidTotalWrapperScrollValue.current = getFluidWrapperScrollValue()\n\n      if (slideEndReached.current) {\n        const nextValue = -fluidTotalWrapperScrollValue.current\n        setCarouselStyles.start({\n          immediate: true,\n          [carouselSlideAxisRef.current]: nextValue,\n        })\n      }\n\n      initialWindowWidth.current = window.innerWidth\n    } else {\n      setCarouselStyles.start({\n        immediate: true,\n        [carouselSlideAxisRef.current]: -(getSlideValue() * getCurrentActiveItem()),\n      })\n    }\n\n    fluidTotalWrapperScrollValue.current = getFluidWrapperScrollValue()\n    adjustCarouselWrapperPosition(carouselTrackWrapperRef.current!)\n  }\n  function handleResize() {\n    if (window.innerWidth === currentWindowWidth.current || freeScroll) {\n      return\n    }\n    resize()\n  }\n  // Custom modules\n  const { useListenToCustomEvent, emitObservable } = useCustomEventsModule<'use-spring'>()\n  const { enterFullscreen, exitFullscreen, getIsFullscreen } =\n    useFullscreenModule<'use-spring'>({\n      mainCarouselWrapperRef,\n      emitObservable,\n      handleResize,\n    })\n  const { thumbsFragment: _thumbsFragment, handleThumbsScroll } = useThumbsModule({\n    withThumbs,\n    items: items as ReactSpringCarouselItemWithThumbs[],\n    thumbsSlideAxis,\n    springConfig,\n    prepareThumbsData,\n    slideType,\n    getFluidWrapperScrollValue,\n    getSlideValue,\n  })\n\n  function getWrapperScrollDirection() {\n    if (!mainCarouselWrapperRef.current) {\n      throw new Error('Missing mainCarouselWrapperRef.current')\n    }\n    return mainCarouselWrapperRef.current[\n      carouselSlideAxisRef.current === 'x' ? 'scrollLeft' : 'scrollTop'\n    ]\n  }\n  function getIfShouldEnableFluidDrag() {\n    if (typeof enableFreeScrollDrag === 'boolean') {\n      return enableFreeScrollDrag\n    } else if (typeof enableFreeScrollDrag === 'function') {\n      return enableFreeScrollDrag()\n    }\n    return false\n  }\n\n  const bindDrag = useDrag(\n    props => {\n      const isDragging = props.dragging\n      const movement = props.offset[carouselSlideAxisRef.current === 'x' ? 0 : 1]\n      const currentMovement = props.movement[carouselSlideAxisRef.current === 'x' ? 0 : 1]\n      const prevItemTreshold = currentMovement > draggingSlideTresholdRef.current\n      const nextItemTreshold = currentMovement < -draggingSlideTresholdRef.current\n      const direction = props.direction[carouselSlideAxisRef.current === 'x' ? 0 : 1]\n      function cancelDrag() {\n        props.cancel()\n      }\n      function setDragDirection() {\n        if (direction > 0) {\n          setSlideActionType('prev')\n        } else {\n          setSlideActionType('next')\n        }\n      }\n      function emitDragObservable() {\n        emitObservable({\n          eventName: 'onDrag',\n          slideActionType: getSlideActionType(),\n          ...props,\n        })\n      }\n      function resetAnimation() {\n        if (slideType === 'fluid') {\n          if (\n            getIfItemsNotFillTheCarousel() ||\n            (getIsFirstItem() && getSlideActionType() === 'prev')\n          ) {\n            setCarouselStyles.start({\n              [carouselSlideAxisRef.current]: 0,\n              config: {\n                velocity: props.velocity,\n                ...springConfig,\n              },\n            })\n          } else if (slideEndReached.current && getSlideActionType() === 'next') {\n            setCarouselStyles.start({\n              [carouselSlideAxisRef.current]: -fluidTotalWrapperScrollValue.current,\n              config: {\n                velocity: props.velocity,\n                ...springConfig,\n              },\n            })\n          } else {\n            setCarouselStyles.start({\n              [carouselSlideAxisRef.current]: prevSlidedValue.current,\n              config: {\n                velocity: props.velocity,\n                ...springConfig,\n              },\n            })\n          }\n        } else {\n          setCarouselStyles.start({\n            [carouselSlideAxisRef.current]: -(getCurrentActiveItem() * getSlideValue()),\n            config: {\n              velocity: props.velocity,\n              ...springConfig,\n            },\n          })\n        }\n      }\n      function checkBounds() {\n        const nextItemWillExceed =\n          Math.abs(getCurrentSlidedValue()) + 100 >= fluidTotalWrapperScrollValue.current\n\n        if (nextItemWillExceed && getSlideActionType() === 'next') {\n          slideEndReached.current = true\n        }\n        if (getSlideActionType() === 'prev') {\n          slideEndReached.current = false\n        }\n      }\n\n      if (freeScroll && getIfShouldEnableFluidDrag()) {\n        if (isDragging) {\n          if (!getIsDragging()) {\n            setIsDragging(true)\n          }\n\n          setDragDirection()\n          emitDragObservable()\n          checkBounds()\n        }\n\n        setCarouselStyles.start({\n          from: {\n            [carouselSlideAxisRef.current]: getWrapperScrollDirection(),\n          },\n          to: {\n            [carouselSlideAxisRef.current]: -movement,\n          },\n          config: {\n            velocity: props.velocity,\n            friction: 50,\n            tension: 1400,\n          },\n        })\n\n        if (getWrapperScrollDirection() === 0 && getSlideActionType() === 'prev') {\n          cancelDrag()\n          return\n        }\n        if (props.last) {\n          if (getSlideActionType() === 'prev') {\n            slideToPrevItem(props.velocity)\n          } else {\n            slideToNextItem(props.velocity)\n          }\n          setIsDragging(false)\n        }\n        return\n      }\n\n      if (isDragging) {\n        if (!getIsDragging()) {\n          setIsDragging(true)\n        }\n\n        emitDragObservable()\n        setDragDirection()\n        checkBounds()\n\n        if (freeScroll) {\n          if (getIfShouldEnableFluidDrag()) {\n            if (getWrapperScrollDirection() === 0 && getSlideActionType() === 'prev') {\n              cancelDrag()\n              return\n            } else {\n              setCarouselStyles.start({\n                config: {\n                  velocity: props.velocity,\n                  friction: 50,\n                  tension: 1400,\n                },\n                from: {\n                  [carouselSlideAxisRef.current]: getWrapperScrollDirection(),\n                },\n                to: {\n                  [carouselSlideAxisRef.current]: -movement,\n                },\n              })\n            }\n          }\n          return\n        } else {\n          setCarouselStyles.start({\n            [carouselSlideAxisRef.current]: movement,\n            config: {\n              velocity: props.velocity,\n              friction: 50,\n              tension: 1000,\n            },\n          })\n        }\n\n        if (\n          (prevItemTreshold || nextItemTreshold) &&\n          getIfItemsNotFillTheCarousel() &&\n          slideType === 'fluid'\n        ) {\n          cancelDrag()\n          resetAnimation()\n        } else if (\n          slideEndReached.current &&\n          getSlideActionType() === 'next' &&\n          nextItemTreshold\n        ) {\n          slideEndReached.current = false\n          cancelDrag()\n          setCarouselStyles.start({\n            [carouselSlideAxisRef.current]: -fluidTotalWrapperScrollValue.current,\n          })\n        } else if (slideWhenThresholdIsReached) {\n          if (nextItemTreshold) {\n            cancelDrag()\n            if (!withLoop && getIsLastItem()) {\n              resetAnimation()\n            } else {\n              slideToNextItem(props.velocity)\n            }\n            return\n          } else if (prevItemTreshold) {\n            cancelDrag()\n            if (!withLoop && getIsFirstItem()) {\n              resetAnimation()\n            } else {\n              slideToPrevItem(props.velocity)\n            }\n            return\n          }\n        }\n      }\n\n      if (\n        props.last &&\n        !slideWhenThresholdIsReached &&\n        (nextItemTreshold || prevItemTreshold) &&\n        !freeScroll\n      ) {\n        setIsDragging(false)\n        if (nextItemTreshold) {\n          if (!withLoop && getIsLastItem()) {\n            resetAnimation()\n          } else {\n            slideToNextItem(props.velocity)\n          }\n        } else if (prevItemTreshold) {\n          if (!withLoop && getIsFirstItem()) {\n            resetAnimation()\n          } else {\n            slideToPrevItem(props.velocity)\n          }\n        }\n        return\n      }\n\n      if (props.last && !nextItemTreshold && !prevItemTreshold) {\n        if (!freeScroll) {\n          resetAnimation()\n          emitObservable({\n            eventName: 'onDrag',\n            slideActionType: getSlideActionType(),\n            ...props,\n          })\n        }\n      }\n    },\n    {\n      enabled: !disableGestures,\n      axis: carouselSlideAxisRef.current,\n      from: () => {\n        if (freeScroll) {\n          if (carouselSlideAxisRef.current === 'x') {\n            return [-getWrapperScrollDirection(), 0]\n          }\n          return [0, -getWrapperScrollDirection()]\n        }\n        return [carouselStyles.x.get(), carouselStyles.y.get()]\n      },\n    },\n  )\n\n  function setSlideActionType(type: SlideActionType) {\n    slideActionType.current = type\n  }\n  function getSlideActionType() {\n    return slideActionType.current\n  }\n  function setActiveItem(newItem: number) {\n    activeItem.current = newItem\n  }\n  function getCurrentActiveItem() {\n    return activeItem.current\n  }\n  function getIsAnimating() {\n    return isAnimating.current\n  }\n  function setIsAnimating(val: boolean) {\n    isAnimating.current = val\n  }\n  function setIsDragging(val: boolean) {\n    isDragging.current = val\n  }\n  function getIsDragging() {\n    return isDragging.current\n  }\n  function getPrevItem() {\n    const currentActiveItem = getCurrentActiveItem()\n    if (currentActiveItem === 0) {\n      return items.length - 1\n    }\n    return currentActiveItem - 1\n  }\n  function getNextItem() {\n    const currentActiveItem = getCurrentActiveItem()\n    if (currentActiveItem === items.length - 1) {\n      return 0\n    }\n    return currentActiveItem + 1\n  }\n  function getIsNextItem(id: string) {\n    const itemIndex = findItemIndex(id)\n    const activeItem = getCurrentActiveItem()\n    if (withLoop && activeItem === items.length - 1) {\n      return itemIndex === 0\n    }\n    return itemIndex === activeItem + 1\n  }\n  function getIsPrevItem(id: string) {\n    const itemIndex = findItemIndex(id)\n    const activeItem = getCurrentActiveItem()\n    if (withLoop && activeItem === 0) {\n      return itemIndex === items.length - 1\n    }\n    return itemIndex === activeItem - 1\n  }\n  function findItemIndex(id: string) {\n    return items.findIndex(item => item.id === id)\n  }\n  function getFromValue(from: SlideToItemFnProps['from']) {\n    if (typeof from === 'number') {\n      return {\n        from: {\n          [carouselSlideAxisRef.current]: from,\n        },\n      }\n    }\n    return {}\n  }\n  function getToValue(\n    customTo: SlideToItemFnProps['customTo'],\n    to: SlideToItemFnProps['to'],\n  ) {\n    if (typeof customTo === 'number') {\n      return {\n        [carouselSlideAxisRef.current]: customTo,\n      }\n    }\n    if (typeof to !== 'number') {\n      throw new Error(`to values is not a number!`)\n    }\n    return {\n      [carouselSlideAxisRef.current]: -(getSlideValue() * to!),\n    }\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  function slideToItem({\n    from,\n    to = -1,\n    customTo,\n    immediate = false,\n    onRest = () => {},\n    velocity,\n  }: SlideToItemFnProps) {\n    if (!immediate) {\n      setActiveItem(to)\n      setIsAnimating(true)\n      emitObservable({\n        eventName: 'onSlideStartChange',\n        slideActionType: getSlideActionType(),\n        nextItem: {\n          index: slideType === 'fluid' ? -1 : to,\n          id: slideType === 'fluid' ? '' : items[to].id,\n        },\n      })\n    }\n    prevSlidedValue.current = getToValue(customTo, to)[carouselSlideAxis]\n    setCarouselStyles.start({\n      ...getFromValue(from),\n      to: getToValue(customTo, to),\n      ...(velocity\n        ? {\n            config: {\n              ...defaultDragSpringConfig,\n              velocity,\n              friction: undefined,\n              tension: undefined,\n            },\n          }\n        : {\n            config: {\n              velocity: 0,\n              ...springConfig,\n            },\n          }),\n      immediate,\n      onRest: val => {\n        if (val.finished) {\n          setIsDragging(false)\n          setIsAnimating(false)\n          onRest()\n          if (!immediate) {\n            emitObservable({\n              eventName: 'onSlideChange',\n              slideActionType: getSlideActionType(),\n              currentItem: {\n                index: slideType === 'fluid' ? -1 : getCurrentActiveItem(),\n                id: slideType === 'fluid' ? '' : items[getCurrentActiveItem()].id,\n              },\n            })\n          }\n        }\n      },\n    })\n    if (enableThumbsWrapperScroll && withThumbs && !immediate) {\n      handleThumbsScroll(to, getSlideActionType())\n    }\n  }\n  function getIsLastItem() {\n    return getCurrentActiveItem() === items.length - 1\n  }\n  function slideToPrevItem(velocity?: number[]) {\n    setSlideActionType('prev')\n    slideEndReached.current = false\n\n    if (slideType === 'fluid') {\n      slideEndReached.current = false\n\n      if (getIfItemsNotFillTheCarousel()) {\n        return\n      }\n      const nextPrevValue = getCurrentSlidedValue() + getSlideValue() + 200\n\n      if (freeScroll) {\n        const nextValue = mainCarouselWrapperRef.current!.scrollLeft - getSlideValue()\n        slideToItem({\n          customTo: nextValue < 0 ? 0 : nextValue,\n          from: mainCarouselWrapperRef.current!.scrollLeft,\n          velocity,\n        })\n      } else if (nextPrevValue >= 0) {\n        if (withLoop) {\n          slideToItem({\n            from: getCurrentSlidedValue() - getCarouselItemWidth() * items.length,\n            velocity,\n            customTo:\n              getCurrentSlidedValue() -\n              getCarouselItemWidth() * items.length +\n              getSlideValue(),\n          })\n        } else {\n          slideToItem({\n            customTo: 0,\n            velocity,\n          })\n        }\n      } else {\n        slideToItem({\n          customTo: getCurrentSlidedValue() + getSlideValue(),\n          velocity,\n        })\n      }\n    } else {\n      if ((!withLoop && getCurrentActiveItem() === 0) || windowIsHidden.current) {\n        return\n      }\n\n      if (getIsFirstItem()) {\n        slideToItem({\n          from: getCurrentSlidedValue() - getSlideValue() * items.length,\n          to: items.length - 1,\n          velocity,\n        })\n      } else {\n        slideToItem({\n          to: getPrevItem(),\n          velocity,\n        })\n      }\n    }\n  }\n  function slideToNextItem(velocity?: number[]) {\n    setSlideActionType('next')\n\n    if (slideType === 'fluid') {\n      if (getIfItemsNotFillTheCarousel()) {\n        return\n      }\n\n      const nextItemWillExceed =\n        Math.abs(getCurrentSlidedValue() - getSlideValue()) + 100 >=\n        fluidTotalWrapperScrollValue.current\n\n      if (freeScroll) {\n        const nextValue = mainCarouselWrapperRef.current!.scrollLeft + getSlideValue()\n        const willExceed = nextValue > fluidTotalWrapperScrollValue.current\n        const val = mainCarouselWrapperRef.current!.scrollLeft + getSlideValue()\n\n        slideToItem({\n          velocity,\n          customTo: willExceed ? fluidTotalWrapperScrollValue.current : val,\n          from: mainCarouselWrapperRef.current!.scrollLeft,\n        })\n      } else if (\n        withLoop &&\n        Math.abs(getCurrentSlidedValue() - getSlideValue()) >=\n          items.length * getCarouselItemWidth()\n      ) {\n        const currentWidth = getCarouselItemWidth() * items.length\n        slideToItem({\n          from: getCurrentSlidedValue() + currentWidth,\n          customTo: getCurrentSlidedValue() + currentWidth - getSlideValue(),\n          velocity,\n        })\n      } else if (slideEndReached.current) {\n        return\n      } else if (nextItemWillExceed) {\n        slideEndReached.current = true\n        slideToItem({\n          customTo: -fluidTotalWrapperScrollValue.current,\n          velocity,\n        })\n      } else {\n        slideToItem({\n          customTo: getCurrentSlidedValue() - getSlideValue(),\n          velocity,\n        })\n      }\n    } else {\n      if (\n        (!withLoop && getCurrentActiveItem() === internalItems.length - 1) ||\n        windowIsHidden.current\n      ) {\n        return\n      }\n\n      const nextItemWillExceed =\n        Math.abs(getCurrentSlidedValue() - getSlideValue() + 25) >\n        fluidTotalWrapperScrollValue.current\n\n      if (nextItemWillExceed && !getIsDragging()) {\n        slideEndReached.current = true\n      } else if (slideEndReached.current) {\n        slideToItem({\n          to: items.length - itemsPerSlideRef.current,\n          velocity,\n        })\n      } else if (getIsLastItem()) {\n        slideToItem({\n          from: getCurrentSlidedValue() + getSlideValue() * items.length,\n          to: 0,\n          velocity,\n        })\n      } else {\n        slideToItem({\n          to: getNextItem(),\n          velocity,\n        })\n      }\n    }\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  function _slideToItem(item: string | number) {\n    let itemIndex = 0\n\n    if (typeof item === 'string') {\n      itemIndex = items.findIndex(_item => _item.id === item)\n    } else {\n      itemIndex = item\n    }\n\n    if (itemIndex >= items.length) {\n      throw Error(\n        `The item you want to slide to doesn't exist. This could be due to the fact that \n        you provide a wrong id or a higher numeric index.`,\n      )\n    }\n\n    if (\n      itemIndex === getCurrentActiveItem() ||\n      (items.length !== prevItems.current.length && getCurrentActiveItem() < items.length)\n    ) {\n      return\n    }\n\n    const currentItem = findItemIndex(prevItems.current[getCurrentActiveItem()].id)\n    const newActiveItem = findItemIndex(items[itemIndex].id)\n\n    if (newActiveItem > currentItem) {\n      setSlideActionType('next')\n    } else {\n      setSlideActionType('prev')\n    }\n\n    slideToItem({\n      to: itemIndex,\n    })\n  }\n  function getItemStyles(_itemsPerSlide: number) {\n    if (slideType === 'fixed') {\n      return {\n        ...(carouselSlideAxisRef.current === 'x'\n          ? { marginRight: `${gutterRef.current}px` }\n          : { marginBottom: `${gutterRef.current}px` }),\n        flex: `1 0 calc(100% / ${_itemsPerSlide} - ${\n          (gutterRef.current * (_itemsPerSlide - 1)) / _itemsPerSlide\n        }px)`,\n      }\n    }\n    return {\n      ...(carouselSlideAxisRef.current === 'x'\n        ? { marginRight: `${gutterRef.current}px` }\n        : { marginBottom: `${gutterRef.current}px` }),\n    }\n  }\n  function getAnimatedWrapperStyles() {\n    const percentValue = `calc(100% - ${startEndGutterRef.current * 2}px)`\n    return {\n      width: carouselSlideAxisRef.current === 'x' ? percentValue : '100%',\n      height: carouselSlideAxisRef.current === 'y' ? percentValue : '100%',\n    }\n  }\n  function getOverflowStyles() {\n    if (freeScroll) {\n      if (carouselSlideAxisRef.current === 'x') {\n        return {\n          overflowX: 'auto',\n        }\n      }\n      return {\n        overflowY: 'auto',\n      }\n    }\n    return {}\n  }\n  function getWheelEvent() {\n    if (freeScroll) {\n      return {\n        onWheel() {\n          carouselStyles[carouselSlideAxisRef.current].stop()\n        },\n      }\n    }\n    return {}\n  }\n  function getTouchAction() {\n    if (disableGestures) {\n      return 'unset'\n    } else if (!touchAction) {\n      if (carouselSlideAxisRef.current === 'x') {\n        return 'pan-y'\n      }\n      return 'pan-x'\n    }\n    return touchAction\n  }\n  // Perform some check on first mount\n  useIsomorphicMount(() => {\n    if (itemsPerSlide % 2 === 0 && initialStartingPositionRef.current) {\n      throw new Error(\n        `initialStartingPosition can be only used if itemsPerSlide is an even value.`,\n      )\n    }\n    if (draggingSlideTresholdRef.current < 0) {\n      throw new Error('draggingSlideTreshold must be greater than 0')\n    }\n    if (draggingSlideTresholdRef.current > getSlideValue() / 2) {\n      throw new Error(\n        `draggingSlideTreshold must be equal or less than the half of the width of an item, which is ${Math.floor(\n          getSlideValue() / 2,\n        )}`,\n      )\n    }\n    if (itemsPerSlideRef.current < 1) {\n      throw new Error(`The itemsPerSlide prop can't be less than 1.`)\n    }\n    if (itemsPerSlideRef.current > items.length) {\n      throw new Error(\n        `The itemsPerSlide prop can't be greater than the total length of the items you provide.`,\n      )\n    }\n    if (initialActiveItemRef.current < 0) {\n      throw new Error('The initialActiveItem cannot be less than 0.')\n    }\n    if (initialActiveItemRef.current > items.length) {\n      throw new Error(\n        'The initialActiveItem cannot be greater than the total length of the items you provide.',\n      )\n    }\n    if (!shouldResizeOnWindowResize) {\n      console.warn(\n        'You set shouldResizeOnWindowResize={false}; be aware that the carousel could behave in a strange way if you also use the fullscreen functionality or if you change the mobile orientation.',\n      )\n    }\n  })\n  useIsomorphicMount(() => {\n    function handleVisibilityChange() {\n      if (document.hidden) {\n        windowIsHidden.current = true\n      } else {\n        windowIsHidden.current = false\n      }\n    }\n    document.addEventListener('visibilitychange', handleVisibilityChange)\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\n    }\n  })\n  useIsomorphicMount(() => {\n    isFirstMount.current = false\n    fluidTotalWrapperScrollValue.current = getFluidWrapperScrollValue()\n    initialWindowWidth.current = window.innerWidth\n    currentWindowWidth.current = window.innerWidth\n\n    if (initialActiveItem > 0) {\n      slideToItem({\n        to: initialActiveItem,\n        immediate: true,\n      })\n      setActiveItem(initialActiveItem)\n      if (!withLoop && carouselTrackWrapperRef.current) {\n        carouselTrackWrapperRef.current.style.top = '0px'\n        carouselTrackWrapperRef.current.style.left = '0px'\n      }\n    }\n  })\n  useIsomorphicLayoutEffect(() => {\n    if (initialActiveItem < items.length && initialActiveItem !== activeItem.current) {\n      slideToItem({\n        to: initialActiveItem,\n        immediate: true,\n      })\n      setActiveItem(initialActiveItem)\n    }\n  }, [initialActiveItem])\n  useIsomorphicLayoutEffect(() => {\n    if (shouldResizeOnWindowResize) {\n      window.addEventListener('resize', handleResize)\n      return () => {\n        window.removeEventListener('resize', handleResize)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shouldResizeOnWindowResize])\n  useIsomorphicLayoutEffect(() => {\n    if (carouselTrackWrapperRef.current) {\n      if (carouselSlideAxisRef.current === 'x') {\n        carouselTrackWrapperRef.current.style.top = '0px'\n      }\n      if (carouselSlideAxisRef.current === 'y') {\n        carouselTrackWrapperRef.current.style.left = '0px'\n      }\n    }\n  }, [carouselSlideAxis])\n  useIsomorphicLayoutEffect(() => {\n    fluidTotalWrapperScrollValue.current = getFluidWrapperScrollValue()\n    const itemsAreEqual = items.length === prevItems.current.length\n\n    if (!itemsAreEqual && items.length < prevItems.current.length) {\n      _slideToItem(items.length - 1)\n    }\n\n    prevItems.current = items\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getFluidWrapperScrollValue, items])\n\n  const contextProps = {\n    useListenToCustomEvent,\n    getIsFullscreen,\n    enterFullscreen,\n    exitFullscreen,\n    getIsAnimating,\n    getIsDragging,\n    getIsNextItem,\n    getIsPrevItem,\n    slideToPrevItem() {\n      slideToPrevItem()\n    },\n    slideToNextItem() {\n      slideToNextItem()\n    },\n    ...(slideType === 'fixed'\n      ? {\n          slideToItem: _slideToItem,\n          getIsActiveItem: (id: string) => {\n            return findItemIndex(id) === getCurrentActiveItem()\n          },\n          getCurrentActiveItem: () => ({\n            id: items[getCurrentActiveItem()].id,\n            index: getCurrentActiveItem(),\n          }),\n        }\n      : {}),\n  }\n\n  const handleCarouselFragmentRef = (ref: HTMLDivElement | null) => {\n    if (ref) {\n      carouselTrackWrapperRef.current = ref\n      adjustCarouselWrapperPosition(ref, initialActiveItemRef.current)\n    }\n  }\n\n  function getInitialStyles() {\n    const totalValue = (items.length / itemsPerSlide) * 100\n    const singleItemValue = 100 / itemsPerSlide\n    const cssProp = carouselSlideAxisRef.current === 'x' ? 'left' : 'y'\n    const quantityToMove = Math.floor(50 / singleItemValue)\n\n    if (slideType === 'fixed') {\n      if (initialStartingPositionRef.current === 'center') {\n        return {\n          [cssProp]: `calc(-${totalValue}% + ${singleItemValue * quantityToMove}%)`,\n        }\n      }\n      if (initialStartingPositionRef.current === 'end') {\n        return {\n          [cssProp]: `calc(-${totalValue}% + ${singleItemValue * (quantityToMove * 2)}%)`,\n        }\n      }\n    }\n    return {\n      [cssProp]: `0px`,\n    }\n  }\n\n  const carouselFragment = (\n    <Context.Provider value={contextProps}>\n      <div\n        ref={mainCarouselWrapperRef}\n        className=\"use-spring-carousel-main-wrapper\"\n        data-testid=\"use-spring-carousel-wrapper\"\n        {...getWheelEvent()}\n        // @ts-ignore\n        style={{\n          display: 'flex',\n          position: 'relative',\n          width: '100%',\n          height: '100%',\n          ...getOverflowStyles(),\n        }}\n      >\n        <animated.div\n          {...bindDrag()}\n          className=\"use-spring-carousel-track-wrapper\"\n          data-testid=\"use-spring-carousel-animated-wrapper\"\n          ref={handleCarouselFragmentRef}\n          style={{\n            display: 'flex',\n            position: 'relative',\n            touchAction: getTouchAction(),\n            flexDirection: carouselSlideAxisRef.current === 'x' ? 'row' : 'column',\n            ...getAnimatedWrapperStyles(),\n            ...getInitialStyles(),\n            ...(freeScroll ? {} : carouselStyles),\n          }}\n        >\n          {internalItems.map(({ id, renderItem }, index) => {\n            return (\n              <div\n                key={`${id}-${index}`}\n                className=\"use-spring-carousel-item\"\n                data-testid=\"use-spring-carousel-item-wrapper\"\n                style={{\n                  display: 'flex',\n                  position: 'relative',\n                  ...getItemStyles(itemsPerSlideRef.current),\n                }}\n              >\n                {renderItem}\n              </div>\n            )\n          })}\n        </animated.div>\n      </div>\n    </Context.Provider>\n  )\n  const thumbsFragment = (\n    <Context.Provider value={contextProps}>{_thumbsFragment}</Context.Provider>\n  )\n\n  return {\n    ...contextProps,\n    carouselFragment,\n    thumbsFragment,\n  }\n}\n\nfunction useSpringCarouselContext<T = 'fixed' | 'fluid'>() {\n  const context = useContext(Context)\n  if (!context) {\n    throw new Error(\n      'useSpringCarouselContext must be used only inside a component that is rendered inside the Carousel.',\n    )\n  }\n  return context as ContextTypes<T>\n}\n\nexport { useSpringCarousel, useSpringCarouselContext }\n"],"names":["Context","createContext","undefined","defaultDragSpringConfig","config","default","mass","velocity","useSpringCarousel","items","withLoop","draggingSlideTreshold","springConfig","shouldResizeOnWindowResize","withThumbs","enableThumbsWrapperScroll","slideWhenThresholdIsReached","carouselSlideAxis","thumbsSlideAxis","prepareThumbsData","initialActiveItem","initialStartingPosition","disableGestures","gutter","startEndGutter","touchAction","slideAmount","freeScroll","enableFreeScrollDrag","itemsPerSlide","slideType","isFirstMount","useRef","slideActionType","internalItems","length","activeItem","mainCarouselWrapperRef","carouselTrackWrapperRef","isDragging","isAnimating","windowIsHidden","fluidTotalWrapperScrollValue","slideEndReached","currentWindowWidth","initialWindowWidth","prevSlidedValue","prevItems","draggingSlideTresholdRef","itemsPerSlideRef","gutterRef","startEndGutterRef","initialActiveItemRef","initialStartingPositionRef","carouselSlideAxisRef","current","carouselStyles","setCarouselStyles","useSpring","y","x","onChange","value","Math","abs","getCarouselItemWidth","carouselItem","querySelector","Error","getBoundingClientRect","getCurrentSlidedValue","get","getIfItemsNotFillTheCarousel","getMainCarouselWrapperWidth","getFluidWrapperScrollValue","round","Number","getIsFirstItem","getCurrentActiveItem","getSlideValue","itemVal","adjustCarouselWrapperPosition","ref","_initialActiveItem","positionProperty","getDefaultPositionValue","setPosition","v","style","top","left","setStartPosition","i","setEndPosition","resize","window","innerWidth","start","immediate","[object Object]","nextValue","handleResize","useIsomorphicLayoutEffect","floor","useListenToCustomEvent","emitObservable","useCustomEventsModule","enterFullscreen","exitFullscreen","getIsFullscreen","useFullscreenModule","thumbsFragment","_thumbsFragment","handleThumbsScroll","useThumbsModule","getWrapperScrollDirection","getIfShouldEnableFluidDrag","bindDrag","useDrag","props","dragging","movement","offset","currentMovement","prevItemTreshold","nextItemTreshold","direction","cancelDrag","cancel","setDragDirection","setSlideActionType","emitDragObservable","eventName","getSlideActionType","resetAnimation","checkBounds","getIsDragging","setIsDragging","from","to","friction","tension","last","slideToPrevItem","slideToNextItem","getIsLastItem","enabled","axis","type","setActiveItem","newItem","setIsAnimating","val","getPrevItem","currentActiveItem","getNextItem","findItemIndex","id","findIndex","item","getToValue","customTo","slideToItem","onRest","nextItem","index","getFromValue","finished","currentItem","nextPrevValue","scrollLeft","nextItemWillExceed","willExceed","currentWidth","_slideToItem","itemIndex","_item","useIsomorphicMount","console","warn","handleVisibilityChange","document","hidden","addEventListener","removeEventListener","contextProps","getIsAnimating","getIsNextItem","getIsPrevItem","getIsActiveItem","carouselFragment","_jsx","Provider","className","stop","display","position","width","height","overflowX","overflowY","animated","div","flexDirection","percentValue","getAnimatedWrapperStyles","totalValue","singleItemValue","cssProp","quantityToMove","getInitialStyles","map","renderItem","_itemsPerSlide","marginRight","marginBottom","flex","useSpringCarouselContext","context","useContext"],"mappings":"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"}