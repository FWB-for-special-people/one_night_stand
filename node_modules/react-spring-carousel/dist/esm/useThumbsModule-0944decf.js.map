{"version":3,"file":"useThumbsModule-0944decf.js","sources":["../../src/modules/useCustomEventsModule.tsx","../../src/utils.ts","../../src/modules/useFullscreenModule.tsx","../../src/modules/useThumbsModule.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\nimport { Subject } from 'rxjs'\nimport {\n  UseSpringCarouselEventsObservableProps,\n  UseTransitionCarouselEventsObservableProps,\n  ObservableCallbackFn,\n  EmitObservableFn,\n} from '../types'\n\nexport function useCustomEventsModule<T>() {\n  const eventsObserverRef = useRef(\n    new Subject<\n      T extends 'use-spring'\n        ? UseSpringCarouselEventsObservableProps\n        : UseTransitionCarouselEventsObservableProps\n    >(),\n  )\n\n  function useListenToCustomEvent(fn: ObservableCallbackFn<T>) {\n    useEffect(() => {\n      const subscribe = eventsObserverRef.current.subscribe(fn)\n      return () => subscribe.unsubscribe()\n    }, [fn])\n  }\n\n  const emitObservable: EmitObservableFn<T> = data => {\n    eventsObserverRef.current.next(data)\n  }\n\n  return {\n    useListenToCustomEvent,\n    emitObservable,\n  }\n}\n","import { useRef, useLayoutEffect, useEffect } from 'react'\n\ntype Callback = () => void | (() => void)\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nfunction useIsomorphicMount(callback: Callback) {\n  const isMounted = useRef(false)\n\n  useIsomorphicLayoutEffect(() => {\n    if (!isMounted.current) {\n      const clean = callback()\n      isMounted.current = true\n\n      return () => {\n        clean && clean()\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n}\n\nexport { useIsomorphicLayoutEffect, useIsomorphicMount }\n","import { useRef, MutableRefObject } from 'react'\nimport screenfull from 'screenfull'\nimport { EmitObservableFn } from '../types'\nimport { useIsomorphicMount } from '../utils'\n\ntype FullscreenModule<T> = {\n  mainCarouselWrapperRef: MutableRefObject<HTMLDivElement | null>\n  emitObservable: EmitObservableFn<T>\n  handleResize?(): void\n}\n\nexport function useFullscreenModule<T>({\n  mainCarouselWrapperRef,\n  emitObservable,\n  handleResize,\n}: FullscreenModule<T>) {\n  const isFullscreen = useRef(false)\n\n  useIsomorphicMount(() => {\n    function handleFullscreenChange() {\n      if (document.fullscreenElement) {\n        setIsFullscreen(true)\n        emitObservable({\n          eventName: 'onFullscreenChange',\n          isFullscreen: true,\n        })\n\n        handleResize && handleResize()\n      }\n\n      if (!document.fullscreenElement) {\n        setIsFullscreen(false)\n        emitObservable({\n          eventName: 'onFullscreenChange',\n          isFullscreen: false,\n        })\n        handleResize && handleResize()\n      }\n    }\n\n    if (screenfull.isEnabled) {\n      screenfull.on('change', handleFullscreenChange)\n      return () => {\n        if (screenfull.isEnabled) {\n          screenfull.off('change', handleFullscreenChange)\n        }\n      }\n    }\n  })\n\n  function setIsFullscreen(_isFullscreen: boolean) {\n    isFullscreen.current = _isFullscreen\n  }\n\n  function getIsFullscreen() {\n    return isFullscreen.current\n  }\n\n  function enterFullscreen(elementRef?: HTMLElement) {\n    if (screenfull.isEnabled) {\n      screenfull.request((elementRef || mainCarouselWrapperRef.current) as Element)\n    }\n  }\n\n  function exitFullscreen() {\n    screenfull.isEnabled && screenfull.exit()\n  }\n\n  return {\n    enterFullscreen,\n    exitFullscreen,\n    getIsFullscreen,\n  }\n}\n","import { useRef } from 'react'\nimport { useSpring, SpringConfig, animated } from 'react-spring'\nimport { useIsomorphicMount } from 'src/utils'\nimport { UseSpringCarouselProps, SlideActionType } from '../types'\nimport { ReactSpringCarouselItemWithThumbs } from '../types/useSpringCarousel'\nimport { PrepareThumbsData } from '../types/index'\n\ntype OffsetDimension = 'offsetWidth' | 'offsetHeight'\ntype OffsetDirection = 'offsetLeft' | 'offsetTop'\ntype ScrollDirection = 'scrollLeft' | 'scrollTop'\n\ntype Props = {\n  items: ReactSpringCarouselItemWithThumbs[]\n  withThumbs: boolean\n  slideType: UseSpringCarouselProps['slideType']\n  thumbsSlideAxis: UseSpringCarouselProps['thumbsSlideAxis']\n  springConfig: SpringConfig\n  prepareThumbsData?: UseSpringCarouselProps['prepareThumbsData']\n  getFluidWrapperScrollValue?(): number\n  getSlideValue?(): number\n}\n\nexport function useThumbsModule({\n  items,\n  withThumbs,\n  thumbsSlideAxis = 'x',\n  springConfig,\n  prepareThumbsData,\n  getFluidWrapperScrollValue = () => 0,\n  getSlideValue = () => 0,\n  slideType,\n}: Props) {\n  const internalThumbsWrapperRef = useRef<HTMLDivElement | null>(null)\n  const [thumbListStyles, setThumbListStyles] = useSpring(() => ({\n    x: 0,\n    y: 0,\n    config: springConfig,\n    onChange: ({ value }) => {\n      if (internalThumbsWrapperRef.current && slideType === 'fluid') {\n        internalThumbsWrapperRef.current[\n          thumbsSlideAxis === 'x' ? 'scrollLeft' : 'scrollTop'\n        ] = Math.abs(value[thumbsSlideAxis])\n      }\n    },\n  }))\n\n  useIsomorphicMount(() => {\n    if (withThumbs && !internalThumbsWrapperRef.current) {\n      throw new Error(\n        \"The thumbs wrapper is not defined. If you've passed a Functional component, be sure to wrap your component in forwardRef.\",\n      )\n    }\n  })\n\n  function getCurrentThumbScrollValue() {\n    return internalThumbsWrapperRef.current![\n      thumbsSlideAxis === 'x' ? 'scrollLeft' : 'scrollTop'\n    ]\n  }\n  function getThumbsTotalScrollableValue() {\n    return Math.round(\n      Number(\n        internalThumbsWrapperRef.current?.[\n          thumbsSlideAxis === 'x' ? 'scrollWidth' : 'scrollHeight'\n        ],\n      ) -\n        internalThumbsWrapperRef.current!.getBoundingClientRect()[\n          thumbsSlideAxis === 'x' ? 'width' : 'height'\n        ],\n    )\n  }\n\n  function getThumbSlideValue() {\n    const thumbSlideTotal = Math.round(getFluidWrapperScrollValue() / getSlideValue())\n    const totalScrollableValue = getThumbsTotalScrollableValue()\n    return totalScrollableValue / thumbSlideTotal\n  }\n\n  function handleThumbsScroll(activeItem: number, actionType?: SlideActionType) {\n    if (slideType === 'fluid') {\n      const totalScrollableValue = getThumbsTotalScrollableValue()\n\n      if (actionType === 'next') {\n        const nextValue = getCurrentThumbScrollValue() + getThumbSlideValue()\n        setThumbListStyles.start({\n          from: {\n            [thumbsSlideAxis]: getCurrentThumbScrollValue(),\n          },\n          to: {\n            [thumbsSlideAxis]:\n              nextValue > totalScrollableValue ? totalScrollableValue : nextValue,\n          },\n        })\n      }\n      if (actionType === 'prev') {\n        const nextValue = getCurrentThumbScrollValue() - getThumbSlideValue()\n        setThumbListStyles.start({\n          from: {\n            [thumbsSlideAxis]: getCurrentThumbScrollValue(),\n          },\n          to: {\n            [thumbsSlideAxis]: nextValue < 0 ? 0 : nextValue,\n          },\n        })\n      }\n    } else {\n      function getOffsetDirection() {\n        return thumbsSlideAxis === 'x' ? 'offsetLeft' : 'offsetTop'\n      }\n      function getOffsetDimension() {\n        return thumbsSlideAxis === 'x' ? 'offsetWidth' : 'offsetHeight'\n      }\n      function getScrollDirecton() {\n        return thumbsSlideAxis === 'x' ? 'scrollLeft' : 'scrollTop'\n      }\n      function getThumbNode() {\n        return internalThumbsWrapperRef.current!.querySelector(\n          `#thumb-${items[activeItem].id}`,\n        ) as HTMLElement\n      }\n      function getThumbOffsetPosition({\n        thumbNode,\n        offsetDirection,\n        offsetDimension,\n      }: {\n        thumbNode: HTMLElement\n        offsetDirection: OffsetDirection\n        offsetDimension: OffsetDimension\n      }) {\n        return thumbNode[offsetDirection] + thumbNode[offsetDimension] / 2\n      }\n      function getThumbScrollDimension({\n        thumbWrapper,\n        offsetDimension,\n      }: {\n        thumbWrapper: HTMLDivElement\n        offsetDimension: OffsetDimension\n      }) {\n        return thumbWrapper[offsetDimension] / 2\n      }\n      function getScrollFromValue({\n        thumbWrapper,\n        scrollDirection,\n      }: {\n        thumbWrapper: HTMLDivElement\n        scrollDirection: ScrollDirection\n      }) {\n        return thumbWrapper[scrollDirection]\n      }\n      function getScrollToValue({\n        thumbWrapper,\n        thumbOffsetPosition,\n        thumbScrollDimension,\n        offsetDimension,\n      }: {\n        thumbWrapper: HTMLDivElement\n        thumbOffsetPosition: number\n        thumbScrollDimension: number\n        offsetDimension: OffsetDimension\n      }) {\n        const scrollDimensionProperty =\n          thumbsSlideAxis === 'x' ? 'scrollWidth' : 'scrollHeight'\n\n        if (\n          activeItem === items.length - 1 ||\n          thumbOffsetPosition - thumbScrollDimension >\n            thumbWrapper[scrollDimensionProperty] - thumbWrapper[offsetDimension]\n        ) {\n          return thumbWrapper[scrollDimensionProperty] - thumbWrapper[offsetDimension]\n        }\n        if (activeItem === 0) {\n          return 0\n        }\n\n        return thumbOffsetPosition - thumbScrollDimension\n      }\n\n      const thumbNode = getThumbNode()\n\n      if (thumbNode) {\n        const thumbWrapper = internalThumbsWrapperRef.current!\n        const offsetDirection = getOffsetDirection()\n        const offsetDimension = getOffsetDimension()\n        const scrollDirection = getScrollDirecton()\n        const thumbOffsetPosition = getThumbOffsetPosition({\n          thumbNode,\n          offsetDimension,\n          offsetDirection,\n        })\n        const thumbScrollDimension = getThumbScrollDimension({\n          thumbWrapper,\n          offsetDimension,\n        })\n\n        const fromValue = getScrollFromValue({\n          thumbWrapper,\n          scrollDirection,\n        })\n        const toValue = getScrollToValue({\n          thumbWrapper,\n          thumbOffsetPosition,\n          thumbScrollDimension,\n          offsetDimension,\n        })\n\n        setThumbListStyles.start({\n          from: {\n            [thumbsSlideAxis]: fromValue,\n          },\n          to: {\n            [thumbsSlideAxis]: actionType === 'prev' && toValue < 0 ? 0 : toValue,\n          },\n          onChange: ({ value }) => {\n            if (thumbsSlideAxis === 'x') {\n              internalThumbsWrapperRef!.current!.scrollLeft = value.x\n            } else {\n              internalThumbsWrapperRef!.current!.scrollTop = value.y\n            }\n          },\n        })\n      }\n    }\n  }\n  function handlePrepareThumbsData() {\n    function getPreparedItems(\n      _items: ReturnType<PrepareThumbsData>,\n    ): ReturnType<PrepareThumbsData> {\n      return _items.map(i => ({\n        id: i.id,\n        renderThumb: i.renderThumb,\n      }))\n    }\n\n    if (prepareThumbsData) {\n      return prepareThumbsData(getPreparedItems(items))\n    }\n    return getPreparedItems(items)\n  }\n\n  const thumbsFragment = withThumbs ? (\n    <animated.div\n      ref={internalThumbsWrapperRef}\n      className=\"use-spring-carousel-thumbs-wrapper\"\n      onWheel={() => {\n        thumbListStyles[thumbsSlideAxis].stop()\n      }}\n      style={{\n        display: 'flex',\n        flex: 1,\n        position: 'relative',\n        width: '100%',\n        height: '100%',\n        flexDirection: thumbsSlideAxis === 'x' ? 'row' : 'column',\n        ...(thumbsSlideAxis === 'x'\n          ? { overflowX: 'auto' }\n          : {\n              overflowY: 'auto',\n              maxHeight: '100%',\n            }),\n      }}\n    >\n      {handlePrepareThumbsData().map(({ id, renderThumb }) => {\n        const thumbId = `thumb-${id}`\n        return (\n          <div key={thumbId} id={thumbId} className=\"thumb-item\">\n            {renderThumb}\n          </div>\n        )\n      })}\n    </animated.div>\n  ) : null\n\n  return {\n    thumbsFragment,\n    handleThumbsScroll,\n  }\n}\n"],"names":["useCustomEventsModule","eventsObserverRef","useRef","Subject","useListenToCustomEvent","fn","useEffect","subscribe","current","unsubscribe","emitObservable","data","next","useIsomorphicLayoutEffect","window","useLayoutEffect","useIsomorphicMount","callback","isMounted","clean","useFullscreenModule","mainCarouselWrapperRef","handleResize","isFullscreen","setIsFullscreen","_isFullscreen","handleFullscreenChange","document","fullscreenElement","eventName","screenfull","isEnabled","on","off","enterFullscreen","elementRef","request","exitFullscreen","exit","getIsFullscreen","useThumbsModule","items","withThumbs","thumbsSlideAxis","springConfig","prepareThumbsData","getFluidWrapperScrollValue","getSlideValue","slideType","internalThumbsWrapperRef","thumbListStyles","setThumbListStyles","useSpring","x","y","config","onChange","value","Math","abs","getCurrentThumbScrollValue","getThumbsTotalScrollableValue","round","Number","getBoundingClientRect","getThumbSlideValue","thumbSlideTotal","Error","thumbsFragment","_jsx","animated","div","ref","className","onWheel","stop","style","display","flex","position","width","height","flexDirection","overflowX","overflowY","maxHeight","getPreparedItems","_items","map","i","id","renderThumb","handlePrepareThumbsData","thumbId","handleThumbsScroll","activeItem","actionType","totalScrollableValue","nextValue","start","from","[object Object]","to","thumbNode","querySelector","thumbWrapper","offsetDimension","scrollDirection","thumbOffsetPosition","offsetDirection","getThumbOffsetPosition","thumbScrollDimension","getThumbScrollDimension","fromValue","getScrollFromValue","toValue","scrollDimensionProperty","length","getScrollToValue","scrollLeft","scrollTop"],"mappings":"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"}