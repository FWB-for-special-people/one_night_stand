{"version":3,"file":"index.js","sources":["../../src/modules/useCustomEventsModule.tsx","../../src/utils.ts","../../src/modules/useFullscreenModule.tsx","../../src/modules/useThumbsModule.tsx","../../src/useSpringCarousel/index.tsx","../../src/useTransitionCarousel/index.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\nimport { Subject } from 'rxjs'\nimport {\n  UseSpringCarouselEventsObservableProps,\n  UseTransitionCarouselEventsObservableProps,\n  ObservableCallbackFn,\n  EmitObservableFn,\n} from '../types'\n\nexport function useCustomEventsModule<T>() {\n  const eventsObserverRef = useRef(\n    new Subject<\n      T extends 'use-spring'\n        ? UseSpringCarouselEventsObservableProps\n        : UseTransitionCarouselEventsObservableProps\n    >(),\n  )\n\n  function useListenToCustomEvent(fn: ObservableCallbackFn<T>) {\n    useEffect(() => {\n      const subscribe = eventsObserverRef.current.subscribe(fn)\n      return () => subscribe.unsubscribe()\n    }, [fn])\n  }\n\n  const emitObservable: EmitObservableFn<T> = data => {\n    eventsObserverRef.current.next(data)\n  }\n\n  return {\n    useListenToCustomEvent,\n    emitObservable,\n  }\n}\n","import { useRef, useLayoutEffect, useEffect } from 'react'\n\ntype Callback = () => void | (() => void)\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nfunction useIsomorphicMount(callback: Callback) {\n  const isMounted = useRef(false)\n\n  useIsomorphicLayoutEffect(() => {\n    if (!isMounted.current) {\n      const clean = callback()\n      isMounted.current = true\n\n      return () => {\n        clean && clean()\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n}\n\nexport { useIsomorphicLayoutEffect, useIsomorphicMount }\n","import { useRef, MutableRefObject } from 'react'\nimport screenfull from 'screenfull'\nimport { EmitObservableFn } from '../types'\nimport { useIsomorphicMount } from '../utils'\n\ntype FullscreenModule<T> = {\n  mainCarouselWrapperRef: MutableRefObject<HTMLDivElement | null>\n  emitObservable: EmitObservableFn<T>\n  handleResize?(): void\n}\n\nexport function useFullscreenModule<T>({\n  mainCarouselWrapperRef,\n  emitObservable,\n  handleResize,\n}: FullscreenModule<T>) {\n  const isFullscreen = useRef(false)\n\n  useIsomorphicMount(() => {\n    function handleFullscreenChange() {\n      if (document.fullscreenElement) {\n        setIsFullscreen(true)\n        emitObservable({\n          eventName: 'onFullscreenChange',\n          isFullscreen: true,\n        })\n\n        handleResize && handleResize()\n      }\n\n      if (!document.fullscreenElement) {\n        setIsFullscreen(false)\n        emitObservable({\n          eventName: 'onFullscreenChange',\n          isFullscreen: false,\n        })\n        handleResize && handleResize()\n      }\n    }\n\n    if (screenfull.isEnabled) {\n      screenfull.on('change', handleFullscreenChange)\n      return () => {\n        if (screenfull.isEnabled) {\n          screenfull.off('change', handleFullscreenChange)\n        }\n      }\n    }\n  })\n\n  function setIsFullscreen(_isFullscreen: boolean) {\n    isFullscreen.current = _isFullscreen\n  }\n\n  function getIsFullscreen() {\n    return isFullscreen.current\n  }\n\n  function enterFullscreen(elementRef?: HTMLElement) {\n    if (screenfull.isEnabled) {\n      screenfull.request((elementRef || mainCarouselWrapperRef.current) as Element)\n    }\n  }\n\n  function exitFullscreen() {\n    screenfull.isEnabled && screenfull.exit()\n  }\n\n  return {\n    enterFullscreen,\n    exitFullscreen,\n    getIsFullscreen,\n  }\n}\n","import { useRef } from 'react'\nimport { useSpring, SpringConfig, animated } from 'react-spring'\nimport { useIsomorphicMount } from 'src/utils'\nimport { UseSpringCarouselProps, SlideActionType } from '../types'\nimport { ReactSpringCarouselItemWithThumbs } from '../types/useSpringCarousel'\nimport { PrepareThumbsData } from '../types/index'\n\ntype OffsetDimension = 'offsetWidth' | 'offsetHeight'\ntype OffsetDirection = 'offsetLeft' | 'offsetTop'\ntype ScrollDirection = 'scrollLeft' | 'scrollTop'\n\ntype Props = {\n  items: ReactSpringCarouselItemWithThumbs[]\n  withThumbs: boolean\n  slideType: UseSpringCarouselProps['slideType']\n  thumbsSlideAxis: UseSpringCarouselProps['thumbsSlideAxis']\n  springConfig: SpringConfig\n  prepareThumbsData?: UseSpringCarouselProps['prepareThumbsData']\n  getFluidWrapperScrollValue?(): number\n  getSlideValue?(): number\n}\n\nexport function useThumbsModule({\n  items,\n  withThumbs,\n  thumbsSlideAxis = 'x',\n  springConfig,\n  prepareThumbsData,\n  getFluidWrapperScrollValue = () => 0,\n  getSlideValue = () => 0,\n  slideType,\n}: Props) {\n  const internalThumbsWrapperRef = useRef<HTMLDivElement | null>(null)\n  const [thumbListStyles, setThumbListStyles] = useSpring(() => ({\n    x: 0,\n    y: 0,\n    config: springConfig,\n    onChange: ({ value }) => {\n      if (internalThumbsWrapperRef.current && slideType === 'fluid') {\n        internalThumbsWrapperRef.current[\n          thumbsSlideAxis === 'x' ? 'scrollLeft' : 'scrollTop'\n        ] = Math.abs(value[thumbsSlideAxis])\n      }\n    },\n  }))\n\n  useIsomorphicMount(() => {\n    if (withThumbs && !internalThumbsWrapperRef.current) {\n      throw new Error(\n        \"The thumbs wrapper is not defined. If you've passed a Functional component, be sure to wrap your component in forwardRef.\",\n      )\n    }\n  })\n\n  function getCurrentThumbScrollValue() {\n    return internalThumbsWrapperRef.current![\n      thumbsSlideAxis === 'x' ? 'scrollLeft' : 'scrollTop'\n    ]\n  }\n  function getThumbsTotalScrollableValue() {\n    return Math.round(\n      Number(\n        internalThumbsWrapperRef.current?.[\n          thumbsSlideAxis === 'x' ? 'scrollWidth' : 'scrollHeight'\n        ],\n      ) -\n        internalThumbsWrapperRef.current!.getBoundingClientRect()[\n          thumbsSlideAxis === 'x' ? 'width' : 'height'\n        ],\n    )\n  }\n\n  function getThumbSlideValue() {\n    const thumbSlideTotal = Math.round(getFluidWrapperScrollValue() / getSlideValue())\n    const totalScrollableValue = getThumbsTotalScrollableValue()\n    return totalScrollableValue / thumbSlideTotal\n  }\n\n  function handleThumbsScroll(activeItem: number, actionType?: SlideActionType) {\n    if (slideType === 'fluid') {\n      const totalScrollableValue = getThumbsTotalScrollableValue()\n\n      if (actionType === 'next') {\n        const nextValue = getCurrentThumbScrollValue() + getThumbSlideValue()\n        setThumbListStyles.start({\n          from: {\n            [thumbsSlideAxis]: getCurrentThumbScrollValue(),\n          },\n          to: {\n            [thumbsSlideAxis]:\n              nextValue > totalScrollableValue ? totalScrollableValue : nextValue,\n          },\n        })\n      }\n      if (actionType === 'prev') {\n        const nextValue = getCurrentThumbScrollValue() - getThumbSlideValue()\n        setThumbListStyles.start({\n          from: {\n            [thumbsSlideAxis]: getCurrentThumbScrollValue(),\n          },\n          to: {\n            [thumbsSlideAxis]: nextValue < 0 ? 0 : nextValue,\n          },\n        })\n      }\n    } else {\n      function getOffsetDirection() {\n        return thumbsSlideAxis === 'x' ? 'offsetLeft' : 'offsetTop'\n      }\n      function getOffsetDimension() {\n        return thumbsSlideAxis === 'x' ? 'offsetWidth' : 'offsetHeight'\n      }\n      function getScrollDirecton() {\n        return thumbsSlideAxis === 'x' ? 'scrollLeft' : 'scrollTop'\n      }\n      function getThumbNode() {\n        return internalThumbsWrapperRef.current!.querySelector(\n          `#thumb-${items[activeItem].id}`,\n        ) as HTMLElement\n      }\n      function getThumbOffsetPosition({\n        thumbNode,\n        offsetDirection,\n        offsetDimension,\n      }: {\n        thumbNode: HTMLElement\n        offsetDirection: OffsetDirection\n        offsetDimension: OffsetDimension\n      }) {\n        return thumbNode[offsetDirection] + thumbNode[offsetDimension] / 2\n      }\n      function getThumbScrollDimension({\n        thumbWrapper,\n        offsetDimension,\n      }: {\n        thumbWrapper: HTMLDivElement\n        offsetDimension: OffsetDimension\n      }) {\n        return thumbWrapper[offsetDimension] / 2\n      }\n      function getScrollFromValue({\n        thumbWrapper,\n        scrollDirection,\n      }: {\n        thumbWrapper: HTMLDivElement\n        scrollDirection: ScrollDirection\n      }) {\n        return thumbWrapper[scrollDirection]\n      }\n      function getScrollToValue({\n        thumbWrapper,\n        thumbOffsetPosition,\n        thumbScrollDimension,\n        offsetDimension,\n      }: {\n        thumbWrapper: HTMLDivElement\n        thumbOffsetPosition: number\n        thumbScrollDimension: number\n        offsetDimension: OffsetDimension\n      }) {\n        const scrollDimensionProperty =\n          thumbsSlideAxis === 'x' ? 'scrollWidth' : 'scrollHeight'\n\n        if (\n          activeItem === items.length - 1 ||\n          thumbOffsetPosition - thumbScrollDimension >\n            thumbWrapper[scrollDimensionProperty] - thumbWrapper[offsetDimension]\n        ) {\n          return thumbWrapper[scrollDimensionProperty] - thumbWrapper[offsetDimension]\n        }\n        if (activeItem === 0) {\n          return 0\n        }\n\n        return thumbOffsetPosition - thumbScrollDimension\n      }\n\n      const thumbNode = getThumbNode()\n\n      if (thumbNode) {\n        const thumbWrapper = internalThumbsWrapperRef.current!\n        const offsetDirection = getOffsetDirection()\n        const offsetDimension = getOffsetDimension()\n        const scrollDirection = getScrollDirecton()\n        const thumbOffsetPosition = getThumbOffsetPosition({\n          thumbNode,\n          offsetDimension,\n          offsetDirection,\n        })\n        const thumbScrollDimension = getThumbScrollDimension({\n          thumbWrapper,\n          offsetDimension,\n        })\n\n        const fromValue = getScrollFromValue({\n          thumbWrapper,\n          scrollDirection,\n        })\n        const toValue = getScrollToValue({\n          thumbWrapper,\n          thumbOffsetPosition,\n          thumbScrollDimension,\n          offsetDimension,\n        })\n\n        setThumbListStyles.start({\n          from: {\n            [thumbsSlideAxis]: fromValue,\n          },\n          to: {\n            [thumbsSlideAxis]: actionType === 'prev' && toValue < 0 ? 0 : toValue,\n          },\n          onChange: ({ value }) => {\n            if (thumbsSlideAxis === 'x') {\n              internalThumbsWrapperRef!.current!.scrollLeft = value.x\n            } else {\n              internalThumbsWrapperRef!.current!.scrollTop = value.y\n            }\n          },\n        })\n      }\n    }\n  }\n  function handlePrepareThumbsData() {\n    function getPreparedItems(\n      _items: ReturnType<PrepareThumbsData>,\n    ): ReturnType<PrepareThumbsData> {\n      return _items.map(i => ({\n        id: i.id,\n        renderThumb: i.renderThumb,\n      }))\n    }\n\n    if (prepareThumbsData) {\n      return prepareThumbsData(getPreparedItems(items))\n    }\n    return getPreparedItems(items)\n  }\n\n  const thumbsFragment = withThumbs ? (\n    <animated.div\n      ref={internalThumbsWrapperRef}\n      className=\"use-spring-carousel-thumbs-wrapper\"\n      onWheel={() => {\n        thumbListStyles[thumbsSlideAxis].stop()\n      }}\n      style={{\n        display: 'flex',\n        flex: 1,\n        position: 'relative',\n        width: '100%',\n        height: '100%',\n        flexDirection: thumbsSlideAxis === 'x' ? 'row' : 'column',\n        ...(thumbsSlideAxis === 'x'\n          ? { overflowX: 'auto' }\n          : {\n              overflowY: 'auto',\n              maxHeight: '100%',\n            }),\n      }}\n    >\n      {handlePrepareThumbsData().map(({ id, renderThumb }) => {\n        const thumbId = `thumb-${id}`\n        return (\n          <div key={thumbId} id={thumbId} className=\"thumb-item\">\n            {renderThumb}\n          </div>\n        )\n      })}\n    </animated.div>\n  ) : null\n\n  return {\n    thumbsFragment,\n    handleThumbsScroll,\n  }\n}\n","import { useRef, createContext, useContext } from 'react'\nimport { useSpring, config, animated } from 'react-spring'\nimport { useDrag } from '@use-gesture/react'\nimport { useCustomEventsModule, useFullscreenModule, useThumbsModule } from '../modules'\nimport {\n  SlideToItemFnProps,\n  SlideActionType,\n  UseSpringFixedSlideTypeReturnProps,\n} from '../types'\nimport { useIsomorphicLayoutEffect, useIsomorphicMount } from '../utils'\nimport {\n  UseSpringCarouselProps,\n  ReactSpringCarouselItemWithThumbs,\n  UseSpringFluidSlideTypeReturnProps,\n  UseSpringCarouselBaseProps,\n  UseSpringCarouselWithThumbs,\n  UseSpringCarouselFluidType,\n  DisableGesturesProps,\n  WithLoopProps,\n  UseSpringCarouselWithNoThumbs,\n  EnableGesturesProps,\n  WithNoLoop,\n  UseSpringCarouselFixedSlideType,\n} from '../types/useSpringCarousel'\n\ntype ReturnType<T> = T extends 'fixed'\n  ? UseSpringFixedSlideTypeReturnProps\n  : UseSpringFluidSlideTypeReturnProps\ntype ContextTypes<T> = Omit<ReturnType<T>, 'carouselFragment' | 'thumbsFragment'>\n\nconst Context = createContext<ContextTypes<'fixed' | 'fluid'> | undefined>(undefined)\n\nconst defaultDragSpringConfig = {\n  ...config.default,\n  mass: 1,\n  velocity: 0,\n}\n\nfunction useSpringCarousel(\n  props: UseSpringCarouselBaseProps &\n    UseSpringCarouselFluidType &\n    (UseSpringCarouselWithThumbs | UseSpringCarouselWithNoThumbs) &\n    (DisableGesturesProps | EnableGesturesProps) &\n    (WithLoopProps | WithNoLoop),\n): ReturnType<'fluid'>\nfunction useSpringCarousel(\n  props: UseSpringCarouselBaseProps &\n    UseSpringCarouselFixedSlideType &\n    (UseSpringCarouselWithThumbs | UseSpringCarouselWithNoThumbs) &\n    (DisableGesturesProps | EnableGesturesProps) &\n    (WithLoopProps | WithNoLoop),\n): ReturnType<'fixed'>\n\nfunction useSpringCarousel({\n  items,\n  withLoop = false,\n  draggingSlideTreshold,\n  springConfig = config.default,\n  shouldResizeOnWindowResize = true,\n  withThumbs = false,\n  enableThumbsWrapperScroll = true,\n  slideWhenThresholdIsReached = true,\n  carouselSlideAxis = 'x',\n  thumbsSlideAxis = 'x',\n  prepareThumbsData,\n  initialActiveItem = 0,\n  initialStartingPosition,\n  disableGestures = false,\n  gutter = 0,\n  startEndGutter = 0,\n  touchAction,\n  slideAmount,\n  freeScroll = false,\n  enableFreeScrollDrag,\n  itemsPerSlide = 1,\n  slideType = 'fixed',\n}: UseSpringCarouselProps): ReturnType<'fixed' | 'fluid'> {\n  function getItems() {\n    if (withLoop) {\n      if (items.length === itemsPerSlide) {\n        return [...items, ...items, ...items, ...items, ...items]\n      }\n      return [...items, ...items, ...items]\n    }\n    return items\n  }\n\n  const isFirstMount = useRef(true)\n  const slideActionType = useRef<SlideActionType>('initial' as SlideActionType)\n  const internalItems = getItems()\n  const activeItem = useRef(initialActiveItem)\n  const mainCarouselWrapperRef = useRef<HTMLDivElement | null>(null)\n  const carouselTrackWrapperRef = useRef<HTMLDivElement | null>(null)\n  const isDragging = useRef(false)\n  const isAnimating = useRef(false)\n  const windowIsHidden = useRef(false)\n  const fluidTotalWrapperScrollValue = useRef(0)\n  const slideEndReached = useRef(false)\n  const currentWindowWidth = useRef(0)\n  const initialWindowWidth = useRef(0)\n  const prevSlidedValue = useRef(0)\n  const prevItems = useRef(items)\n\n  /**\n   * Instead of raw values, we store it in\n   * useRef for performances reasons during external rerenders\n   */\n  const draggingSlideTresholdRef = useRef<number>(draggingSlideTreshold ?? 0)\n  const itemsPerSlideRef = useRef(itemsPerSlide)\n  const gutterRef = useRef(gutter)\n  const startEndGutterRef = useRef(startEndGutter)\n  const initialActiveItemRef = useRef(initialActiveItem)\n  const initialStartingPositionRef = useRef(initialStartingPosition)\n  const carouselSlideAxisRef = useRef(carouselSlideAxis)\n\n  /**\n   * Update inner values during external rerenders!\n   */\n  itemsPerSlideRef.current = itemsPerSlide\n  gutterRef.current = gutter\n  startEndGutterRef.current = startEndGutter\n  initialActiveItemRef.current = initialActiveItem\n  initialStartingPositionRef.current = initialStartingPosition\n  carouselSlideAxisRef.current = carouselSlideAxis\n\n  const [carouselStyles, setCarouselStyles] = useSpring(() => ({\n    y: 0,\n    x: 0,\n    onChange: ({ value }) => {\n      if (mainCarouselWrapperRef.current && freeScroll) {\n        mainCarouselWrapperRef.current[\n          carouselSlideAxisRef.current === 'x' ? 'scrollLeft' : 'scrollTop'\n        ] = Math.abs(value[carouselSlideAxisRef.current])\n      }\n    },\n  }))\n\n  useIsomorphicLayoutEffect(() => {\n    if (draggingSlideTreshold) {\n      draggingSlideTresholdRef.current = draggingSlideTreshold\n    } else {\n      draggingSlideTresholdRef.current = Math.floor(getSlideValue() / 2 / 2)\n    }\n\n    resize()\n  }, [\n    draggingSlideTreshold,\n    itemsPerSlide,\n    gutter,\n    startEndGutter,\n    initialActiveItem,\n    initialStartingPosition,\n    carouselSlideAxis,\n    thumbsSlideAxis,\n  ])\n\n  function getCarouselItem() {\n    return carouselTrackWrapperRef.current?.querySelector('.use-spring-carousel-item')\n  }\n  function getMainCarouselWrapperWidth() {\n    if (!mainCarouselWrapperRef.current) {\n      throw new Error('mainCarouselWrapperRef is not available')\n    }\n    return mainCarouselWrapperRef.current.getBoundingClientRect()[\n      carouselSlideAxisRef.current === 'x' ? 'width' : 'height'\n    ]\n  }\n  function getCarouselItemWidth() {\n    const carouselItem = getCarouselItem()\n    if (!carouselItem) {\n      throw Error('No carousel items available!')\n    }\n    return (\n      carouselItem.getBoundingClientRect()[\n        carouselSlideAxisRef.current === 'x' ? 'width' : 'height'\n      ] + gutterRef.current\n    )\n  }\n  function getCurrentSlidedValue() {\n    return carouselStyles[carouselSlideAxisRef.current].get()\n  }\n  function getIfItemsNotFillTheCarousel() {\n    return getCarouselItemWidth() * items.length < getMainCarouselWrapperWidth()\n  }\n  function getFluidWrapperScrollValue() {\n    return Math.round(\n      Number(\n        carouselTrackWrapperRef.current?.[\n          carouselSlideAxisRef.current === 'x' ? 'scrollWidth' : 'scrollHeight'\n        ],\n      ) -\n        carouselTrackWrapperRef.current!.getBoundingClientRect()[\n          carouselSlideAxisRef.current === 'x' ? 'width' : 'height'\n        ],\n    )\n  }\n  function getIsFirstItem() {\n    return getCurrentActiveItem() === 0\n  }\n  function getSlideValue() {\n    if (!carouselTrackWrapperRef.current) {\n      return 0\n    }\n    const itemVal = getCarouselItemWidth()\n\n    if (slideType === 'fluid' && typeof slideAmount === 'number') {\n      if (slideAmount < itemVal) {\n        throw new Error('slideAmount must be greater than the width of a single item.')\n      }\n      return slideAmount\n    }\n    return itemVal\n  }\n  function adjustCarouselWrapperPosition(\n    ref: HTMLDivElement,\n    _initialActiveItem?: number,\n  ) {\n    const positionProperty = carouselSlideAxisRef.current === 'x' ? 'left' : 'top'\n    function getDefaultPositionValue() {\n      return getCarouselItemWidth() * items.length\n    }\n    function setPosition(v: number) {\n      if (withLoop) {\n        ref.style.top = '0px'\n        ref.style[positionProperty] = `-${v - startEndGutterRef.current}px`\n      } else {\n        ref.style.left = '0px'\n        ref.style.top = '0px'\n        if (_initialActiveItem && isFirstMount.current) {\n          ref.style[positionProperty] = `calc(-${_initialActiveItem} * 100%)`\n        }\n      }\n    }\n    function setStartPosition() {\n      setPosition(getDefaultPositionValue())\n    }\n\n    if (slideType === 'fixed') {\n      function setCenterPosition(i: number) {\n        setPosition(\n          getDefaultPositionValue() -\n            getSlideValue() * Math.round(((i as number) - 1) / 2),\n        )\n      }\n      function setEndPosition(i: number) {\n        setPosition(\n          getDefaultPositionValue() - getSlideValue() * Math.round((i as number) - 1),\n        )\n      }\n\n      if (itemsPerSlideRef.current > 1) {\n        switch (initialStartingPositionRef.current) {\n          default:\n          case 'start': {\n            setStartPosition()\n            break\n          }\n          case 'center': {\n            setCenterPosition(itemsPerSlideRef.current)\n            break\n          }\n          case 'end': {\n            setEndPosition(itemsPerSlideRef.current)\n            break\n          }\n        }\n      } else {\n        setStartPosition()\n      }\n    } else {\n      setStartPosition()\n    }\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  function resize() {\n    currentWindowWidth.current = window.innerWidth\n\n    if (slideType === 'fluid') {\n      if (getIfItemsNotFillTheCarousel()) {\n        setCarouselStyles.start({\n          immediate: true,\n          [carouselSlideAxisRef.current]: 0,\n        })\n        return\n      }\n      fluidTotalWrapperScrollValue.current = getFluidWrapperScrollValue()\n\n      if (slideEndReached.current) {\n        const nextValue = -fluidTotalWrapperScrollValue.current\n        setCarouselStyles.start({\n          immediate: true,\n          [carouselSlideAxisRef.current]: nextValue,\n        })\n      }\n\n      initialWindowWidth.current = window.innerWidth\n    } else {\n      setCarouselStyles.start({\n        immediate: true,\n        [carouselSlideAxisRef.current]: -(getSlideValue() * getCurrentActiveItem()),\n      })\n    }\n\n    fluidTotalWrapperScrollValue.current = getFluidWrapperScrollValue()\n    adjustCarouselWrapperPosition(carouselTrackWrapperRef.current!)\n  }\n  function handleResize() {\n    if (window.innerWidth === currentWindowWidth.current || freeScroll) {\n      return\n    }\n    resize()\n  }\n  // Custom modules\n  const { useListenToCustomEvent, emitObservable } = useCustomEventsModule<'use-spring'>()\n  const { enterFullscreen, exitFullscreen, getIsFullscreen } =\n    useFullscreenModule<'use-spring'>({\n      mainCarouselWrapperRef,\n      emitObservable,\n      handleResize,\n    })\n  const { thumbsFragment: _thumbsFragment, handleThumbsScroll } = useThumbsModule({\n    withThumbs,\n    items: items as ReactSpringCarouselItemWithThumbs[],\n    thumbsSlideAxis,\n    springConfig,\n    prepareThumbsData,\n    slideType,\n    getFluidWrapperScrollValue,\n    getSlideValue,\n  })\n\n  function getWrapperScrollDirection() {\n    if (!mainCarouselWrapperRef.current) {\n      throw new Error('Missing mainCarouselWrapperRef.current')\n    }\n    return mainCarouselWrapperRef.current[\n      carouselSlideAxisRef.current === 'x' ? 'scrollLeft' : 'scrollTop'\n    ]\n  }\n  function getIfShouldEnableFluidDrag() {\n    if (typeof enableFreeScrollDrag === 'boolean') {\n      return enableFreeScrollDrag\n    } else if (typeof enableFreeScrollDrag === 'function') {\n      return enableFreeScrollDrag()\n    }\n    return false\n  }\n\n  const bindDrag = useDrag(\n    props => {\n      const isDragging = props.dragging\n      const movement = props.offset[carouselSlideAxisRef.current === 'x' ? 0 : 1]\n      const currentMovement = props.movement[carouselSlideAxisRef.current === 'x' ? 0 : 1]\n      const prevItemTreshold = currentMovement > draggingSlideTresholdRef.current\n      const nextItemTreshold = currentMovement < -draggingSlideTresholdRef.current\n      const direction = props.direction[carouselSlideAxisRef.current === 'x' ? 0 : 1]\n      function cancelDrag() {\n        props.cancel()\n      }\n      function setDragDirection() {\n        if (direction > 0) {\n          setSlideActionType('prev')\n        } else {\n          setSlideActionType('next')\n        }\n      }\n      function emitDragObservable() {\n        emitObservable({\n          eventName: 'onDrag',\n          slideActionType: getSlideActionType(),\n          ...props,\n        })\n      }\n      function resetAnimation() {\n        if (slideType === 'fluid') {\n          if (\n            getIfItemsNotFillTheCarousel() ||\n            (getIsFirstItem() && getSlideActionType() === 'prev')\n          ) {\n            setCarouselStyles.start({\n              [carouselSlideAxisRef.current]: 0,\n              config: {\n                velocity: props.velocity,\n                ...springConfig,\n              },\n            })\n          } else if (slideEndReached.current && getSlideActionType() === 'next') {\n            setCarouselStyles.start({\n              [carouselSlideAxisRef.current]: -fluidTotalWrapperScrollValue.current,\n              config: {\n                velocity: props.velocity,\n                ...springConfig,\n              },\n            })\n          } else {\n            setCarouselStyles.start({\n              [carouselSlideAxisRef.current]: prevSlidedValue.current,\n              config: {\n                velocity: props.velocity,\n                ...springConfig,\n              },\n            })\n          }\n        } else {\n          setCarouselStyles.start({\n            [carouselSlideAxisRef.current]: -(getCurrentActiveItem() * getSlideValue()),\n            config: {\n              velocity: props.velocity,\n              ...springConfig,\n            },\n          })\n        }\n      }\n      function checkBounds() {\n        const nextItemWillExceed =\n          Math.abs(getCurrentSlidedValue()) + 100 >= fluidTotalWrapperScrollValue.current\n\n        if (nextItemWillExceed && getSlideActionType() === 'next') {\n          slideEndReached.current = true\n        }\n        if (getSlideActionType() === 'prev') {\n          slideEndReached.current = false\n        }\n      }\n\n      if (freeScroll && getIfShouldEnableFluidDrag()) {\n        if (isDragging) {\n          if (!getIsDragging()) {\n            setIsDragging(true)\n          }\n\n          setDragDirection()\n          emitDragObservable()\n          checkBounds()\n        }\n\n        setCarouselStyles.start({\n          from: {\n            [carouselSlideAxisRef.current]: getWrapperScrollDirection(),\n          },\n          to: {\n            [carouselSlideAxisRef.current]: -movement,\n          },\n          config: {\n            velocity: props.velocity,\n            friction: 50,\n            tension: 1400,\n          },\n        })\n\n        if (getWrapperScrollDirection() === 0 && getSlideActionType() === 'prev') {\n          cancelDrag()\n          return\n        }\n        if (props.last) {\n          if (getSlideActionType() === 'prev') {\n            slideToPrevItem(props.velocity)\n          } else {\n            slideToNextItem(props.velocity)\n          }\n          setIsDragging(false)\n        }\n        return\n      }\n\n      if (isDragging) {\n        if (!getIsDragging()) {\n          setIsDragging(true)\n        }\n\n        emitDragObservable()\n        setDragDirection()\n        checkBounds()\n\n        if (freeScroll) {\n          if (getIfShouldEnableFluidDrag()) {\n            if (getWrapperScrollDirection() === 0 && getSlideActionType() === 'prev') {\n              cancelDrag()\n              return\n            } else {\n              setCarouselStyles.start({\n                config: {\n                  velocity: props.velocity,\n                  friction: 50,\n                  tension: 1400,\n                },\n                from: {\n                  [carouselSlideAxisRef.current]: getWrapperScrollDirection(),\n                },\n                to: {\n                  [carouselSlideAxisRef.current]: -movement,\n                },\n              })\n            }\n          }\n          return\n        } else {\n          setCarouselStyles.start({\n            [carouselSlideAxisRef.current]: movement,\n            config: {\n              velocity: props.velocity,\n              friction: 50,\n              tension: 1000,\n            },\n          })\n        }\n\n        if (\n          (prevItemTreshold || nextItemTreshold) &&\n          getIfItemsNotFillTheCarousel() &&\n          slideType === 'fluid'\n        ) {\n          cancelDrag()\n          resetAnimation()\n        } else if (\n          slideEndReached.current &&\n          getSlideActionType() === 'next' &&\n          nextItemTreshold\n        ) {\n          slideEndReached.current = false\n          cancelDrag()\n          setCarouselStyles.start({\n            [carouselSlideAxisRef.current]: -fluidTotalWrapperScrollValue.current,\n          })\n        } else if (slideWhenThresholdIsReached) {\n          if (nextItemTreshold) {\n            cancelDrag()\n            if (!withLoop && getIsLastItem()) {\n              resetAnimation()\n            } else {\n              slideToNextItem(props.velocity)\n            }\n            return\n          } else if (prevItemTreshold) {\n            cancelDrag()\n            if (!withLoop && getIsFirstItem()) {\n              resetAnimation()\n            } else {\n              slideToPrevItem(props.velocity)\n            }\n            return\n          }\n        }\n      }\n\n      if (\n        props.last &&\n        !slideWhenThresholdIsReached &&\n        (nextItemTreshold || prevItemTreshold) &&\n        !freeScroll\n      ) {\n        setIsDragging(false)\n        if (nextItemTreshold) {\n          if (!withLoop && getIsLastItem()) {\n            resetAnimation()\n          } else {\n            slideToNextItem(props.velocity)\n          }\n        } else if (prevItemTreshold) {\n          if (!withLoop && getIsFirstItem()) {\n            resetAnimation()\n          } else {\n            slideToPrevItem(props.velocity)\n          }\n        }\n        return\n      }\n\n      if (props.last && !nextItemTreshold && !prevItemTreshold) {\n        if (!freeScroll) {\n          resetAnimation()\n          emitObservable({\n            eventName: 'onDrag',\n            slideActionType: getSlideActionType(),\n            ...props,\n          })\n        }\n      }\n    },\n    {\n      enabled: !disableGestures,\n      axis: carouselSlideAxisRef.current,\n      from: () => {\n        if (freeScroll) {\n          if (carouselSlideAxisRef.current === 'x') {\n            return [-getWrapperScrollDirection(), 0]\n          }\n          return [0, -getWrapperScrollDirection()]\n        }\n        return [carouselStyles.x.get(), carouselStyles.y.get()]\n      },\n    },\n  )\n\n  function setSlideActionType(type: SlideActionType) {\n    slideActionType.current = type\n  }\n  function getSlideActionType() {\n    return slideActionType.current\n  }\n  function setActiveItem(newItem: number) {\n    activeItem.current = newItem\n  }\n  function getCurrentActiveItem() {\n    return activeItem.current\n  }\n  function getIsAnimating() {\n    return isAnimating.current\n  }\n  function setIsAnimating(val: boolean) {\n    isAnimating.current = val\n  }\n  function setIsDragging(val: boolean) {\n    isDragging.current = val\n  }\n  function getIsDragging() {\n    return isDragging.current\n  }\n  function getPrevItem() {\n    const currentActiveItem = getCurrentActiveItem()\n    if (currentActiveItem === 0) {\n      return items.length - 1\n    }\n    return currentActiveItem - 1\n  }\n  function getNextItem() {\n    const currentActiveItem = getCurrentActiveItem()\n    if (currentActiveItem === items.length - 1) {\n      return 0\n    }\n    return currentActiveItem + 1\n  }\n  function getIsNextItem(id: string) {\n    const itemIndex = findItemIndex(id)\n    const activeItem = getCurrentActiveItem()\n    if (withLoop && activeItem === items.length - 1) {\n      return itemIndex === 0\n    }\n    return itemIndex === activeItem + 1\n  }\n  function getIsPrevItem(id: string) {\n    const itemIndex = findItemIndex(id)\n    const activeItem = getCurrentActiveItem()\n    if (withLoop && activeItem === 0) {\n      return itemIndex === items.length - 1\n    }\n    return itemIndex === activeItem - 1\n  }\n  function findItemIndex(id: string) {\n    return items.findIndex(item => item.id === id)\n  }\n  function getFromValue(from: SlideToItemFnProps['from']) {\n    if (typeof from === 'number') {\n      return {\n        from: {\n          [carouselSlideAxisRef.current]: from,\n        },\n      }\n    }\n    return {}\n  }\n  function getToValue(\n    customTo: SlideToItemFnProps['customTo'],\n    to: SlideToItemFnProps['to'],\n  ) {\n    if (typeof customTo === 'number') {\n      return {\n        [carouselSlideAxisRef.current]: customTo,\n      }\n    }\n    if (typeof to !== 'number') {\n      throw new Error(`to values is not a number!`)\n    }\n    return {\n      [carouselSlideAxisRef.current]: -(getSlideValue() * to!),\n    }\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  function slideToItem({\n    from,\n    to = -1,\n    customTo,\n    immediate = false,\n    onRest = () => {},\n    velocity,\n  }: SlideToItemFnProps) {\n    if (!immediate) {\n      setActiveItem(to)\n      setIsAnimating(true)\n      emitObservable({\n        eventName: 'onSlideStartChange',\n        slideActionType: getSlideActionType(),\n        nextItem: {\n          index: slideType === 'fluid' ? -1 : to,\n          id: slideType === 'fluid' ? '' : items[to].id,\n        },\n      })\n    }\n    prevSlidedValue.current = getToValue(customTo, to)[carouselSlideAxis]\n    setCarouselStyles.start({\n      ...getFromValue(from),\n      to: getToValue(customTo, to),\n      ...(velocity\n        ? {\n            config: {\n              ...defaultDragSpringConfig,\n              velocity,\n              friction: undefined,\n              tension: undefined,\n            },\n          }\n        : {\n            config: {\n              velocity: 0,\n              ...springConfig,\n            },\n          }),\n      immediate,\n      onRest: val => {\n        if (val.finished) {\n          setIsDragging(false)\n          setIsAnimating(false)\n          onRest()\n          if (!immediate) {\n            emitObservable({\n              eventName: 'onSlideChange',\n              slideActionType: getSlideActionType(),\n              currentItem: {\n                index: slideType === 'fluid' ? -1 : getCurrentActiveItem(),\n                id: slideType === 'fluid' ? '' : items[getCurrentActiveItem()].id,\n              },\n            })\n          }\n        }\n      },\n    })\n    if (enableThumbsWrapperScroll && withThumbs && !immediate) {\n      handleThumbsScroll(to, getSlideActionType())\n    }\n  }\n  function getIsLastItem() {\n    return getCurrentActiveItem() === items.length - 1\n  }\n  function slideToPrevItem(velocity?: number[]) {\n    setSlideActionType('prev')\n    slideEndReached.current = false\n\n    if (slideType === 'fluid') {\n      slideEndReached.current = false\n\n      if (getIfItemsNotFillTheCarousel()) {\n        return\n      }\n      const nextPrevValue = getCurrentSlidedValue() + getSlideValue() + 200\n\n      if (freeScroll) {\n        const nextValue = mainCarouselWrapperRef.current!.scrollLeft - getSlideValue()\n        slideToItem({\n          customTo: nextValue < 0 ? 0 : nextValue,\n          from: mainCarouselWrapperRef.current!.scrollLeft,\n          velocity,\n        })\n      } else if (nextPrevValue >= 0) {\n        if (withLoop) {\n          slideToItem({\n            from: getCurrentSlidedValue() - getCarouselItemWidth() * items.length,\n            velocity,\n            customTo:\n              getCurrentSlidedValue() -\n              getCarouselItemWidth() * items.length +\n              getSlideValue(),\n          })\n        } else {\n          slideToItem({\n            customTo: 0,\n            velocity,\n          })\n        }\n      } else {\n        slideToItem({\n          customTo: getCurrentSlidedValue() + getSlideValue(),\n          velocity,\n        })\n      }\n    } else {\n      if ((!withLoop && getCurrentActiveItem() === 0) || windowIsHidden.current) {\n        return\n      }\n\n      if (getIsFirstItem()) {\n        slideToItem({\n          from: getCurrentSlidedValue() - getSlideValue() * items.length,\n          to: items.length - 1,\n          velocity,\n        })\n      } else {\n        slideToItem({\n          to: getPrevItem(),\n          velocity,\n        })\n      }\n    }\n  }\n  function slideToNextItem(velocity?: number[]) {\n    setSlideActionType('next')\n\n    if (slideType === 'fluid') {\n      if (getIfItemsNotFillTheCarousel()) {\n        return\n      }\n\n      const nextItemWillExceed =\n        Math.abs(getCurrentSlidedValue() - getSlideValue()) + 100 >=\n        fluidTotalWrapperScrollValue.current\n\n      if (freeScroll) {\n        const nextValue = mainCarouselWrapperRef.current!.scrollLeft + getSlideValue()\n        const willExceed = nextValue > fluidTotalWrapperScrollValue.current\n        const val = mainCarouselWrapperRef.current!.scrollLeft + getSlideValue()\n\n        slideToItem({\n          velocity,\n          customTo: willExceed ? fluidTotalWrapperScrollValue.current : val,\n          from: mainCarouselWrapperRef.current!.scrollLeft,\n        })\n      } else if (\n        withLoop &&\n        Math.abs(getCurrentSlidedValue() - getSlideValue()) >=\n          items.length * getCarouselItemWidth()\n      ) {\n        const currentWidth = getCarouselItemWidth() * items.length\n        slideToItem({\n          from: getCurrentSlidedValue() + currentWidth,\n          customTo: getCurrentSlidedValue() + currentWidth - getSlideValue(),\n          velocity,\n        })\n      } else if (slideEndReached.current) {\n        return\n      } else if (nextItemWillExceed) {\n        slideEndReached.current = true\n        slideToItem({\n          customTo: -fluidTotalWrapperScrollValue.current,\n          velocity,\n        })\n      } else {\n        slideToItem({\n          customTo: getCurrentSlidedValue() - getSlideValue(),\n          velocity,\n        })\n      }\n    } else {\n      if (\n        (!withLoop && getCurrentActiveItem() === internalItems.length - 1) ||\n        windowIsHidden.current\n      ) {\n        return\n      }\n\n      const nextItemWillExceed =\n        Math.abs(getCurrentSlidedValue() - getSlideValue() + 25) >\n        fluidTotalWrapperScrollValue.current\n\n      if (nextItemWillExceed && !getIsDragging()) {\n        slideEndReached.current = true\n      } else if (slideEndReached.current) {\n        slideToItem({\n          to: items.length - itemsPerSlideRef.current,\n          velocity,\n        })\n      } else if (getIsLastItem()) {\n        slideToItem({\n          from: getCurrentSlidedValue() + getSlideValue() * items.length,\n          to: 0,\n          velocity,\n        })\n      } else {\n        slideToItem({\n          to: getNextItem(),\n          velocity,\n        })\n      }\n    }\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  function _slideToItem(item: string | number) {\n    let itemIndex = 0\n\n    if (typeof item === 'string') {\n      itemIndex = items.findIndex(_item => _item.id === item)\n    } else {\n      itemIndex = item\n    }\n\n    if (itemIndex >= items.length) {\n      throw Error(\n        `The item you want to slide to doesn't exist. This could be due to the fact that \n        you provide a wrong id or a higher numeric index.`,\n      )\n    }\n\n    if (\n      itemIndex === getCurrentActiveItem() ||\n      (items.length !== prevItems.current.length && getCurrentActiveItem() < items.length)\n    ) {\n      return\n    }\n\n    const currentItem = findItemIndex(prevItems.current[getCurrentActiveItem()].id)\n    const newActiveItem = findItemIndex(items[itemIndex].id)\n\n    if (newActiveItem > currentItem) {\n      setSlideActionType('next')\n    } else {\n      setSlideActionType('prev')\n    }\n\n    slideToItem({\n      to: itemIndex,\n    })\n  }\n  function getItemStyles(_itemsPerSlide: number) {\n    if (slideType === 'fixed') {\n      return {\n        ...(carouselSlideAxisRef.current === 'x'\n          ? { marginRight: `${gutterRef.current}px` }\n          : { marginBottom: `${gutterRef.current}px` }),\n        flex: `1 0 calc(100% / ${_itemsPerSlide} - ${\n          (gutterRef.current * (_itemsPerSlide - 1)) / _itemsPerSlide\n        }px)`,\n      }\n    }\n    return {\n      ...(carouselSlideAxisRef.current === 'x'\n        ? { marginRight: `${gutterRef.current}px` }\n        : { marginBottom: `${gutterRef.current}px` }),\n    }\n  }\n  function getAnimatedWrapperStyles() {\n    const percentValue = `calc(100% - ${startEndGutterRef.current * 2}px)`\n    return {\n      width: carouselSlideAxisRef.current === 'x' ? percentValue : '100%',\n      height: carouselSlideAxisRef.current === 'y' ? percentValue : '100%',\n    }\n  }\n  function getOverflowStyles() {\n    if (freeScroll) {\n      if (carouselSlideAxisRef.current === 'x') {\n        return {\n          overflowX: 'auto',\n        }\n      }\n      return {\n        overflowY: 'auto',\n      }\n    }\n    return {}\n  }\n  function getWheelEvent() {\n    if (freeScroll) {\n      return {\n        onWheel() {\n          carouselStyles[carouselSlideAxisRef.current].stop()\n        },\n      }\n    }\n    return {}\n  }\n  function getTouchAction() {\n    if (disableGestures) {\n      return 'unset'\n    } else if (!touchAction) {\n      if (carouselSlideAxisRef.current === 'x') {\n        return 'pan-y'\n      }\n      return 'pan-x'\n    }\n    return touchAction\n  }\n  // Perform some check on first mount\n  useIsomorphicMount(() => {\n    if (itemsPerSlide % 2 === 0 && initialStartingPositionRef.current) {\n      throw new Error(\n        `initialStartingPosition can be only used if itemsPerSlide is an even value.`,\n      )\n    }\n    if (draggingSlideTresholdRef.current < 0) {\n      throw new Error('draggingSlideTreshold must be greater than 0')\n    }\n    if (draggingSlideTresholdRef.current > getSlideValue() / 2) {\n      throw new Error(\n        `draggingSlideTreshold must be equal or less than the half of the width of an item, which is ${Math.floor(\n          getSlideValue() / 2,\n        )}`,\n      )\n    }\n    if (itemsPerSlideRef.current < 1) {\n      throw new Error(`The itemsPerSlide prop can't be less than 1.`)\n    }\n    if (itemsPerSlideRef.current > items.length) {\n      throw new Error(\n        `The itemsPerSlide prop can't be greater than the total length of the items you provide.`,\n      )\n    }\n    if (initialActiveItemRef.current < 0) {\n      throw new Error('The initialActiveItem cannot be less than 0.')\n    }\n    if (initialActiveItemRef.current > items.length) {\n      throw new Error(\n        'The initialActiveItem cannot be greater than the total length of the items you provide.',\n      )\n    }\n    if (!shouldResizeOnWindowResize) {\n      console.warn(\n        'You set shouldResizeOnWindowResize={false}; be aware that the carousel could behave in a strange way if you also use the fullscreen functionality or if you change the mobile orientation.',\n      )\n    }\n  })\n  useIsomorphicMount(() => {\n    function handleVisibilityChange() {\n      if (document.hidden) {\n        windowIsHidden.current = true\n      } else {\n        windowIsHidden.current = false\n      }\n    }\n    document.addEventListener('visibilitychange', handleVisibilityChange)\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\n    }\n  })\n  useIsomorphicMount(() => {\n    isFirstMount.current = false\n    fluidTotalWrapperScrollValue.current = getFluidWrapperScrollValue()\n    initialWindowWidth.current = window.innerWidth\n    currentWindowWidth.current = window.innerWidth\n\n    if (initialActiveItem > 0) {\n      slideToItem({\n        to: initialActiveItem,\n        immediate: true,\n      })\n      setActiveItem(initialActiveItem)\n      if (!withLoop && carouselTrackWrapperRef.current) {\n        carouselTrackWrapperRef.current.style.top = '0px'\n        carouselTrackWrapperRef.current.style.left = '0px'\n      }\n    }\n  })\n  useIsomorphicLayoutEffect(() => {\n    if (initialActiveItem < items.length && initialActiveItem !== activeItem.current) {\n      slideToItem({\n        to: initialActiveItem,\n        immediate: true,\n      })\n      setActiveItem(initialActiveItem)\n    }\n  }, [initialActiveItem])\n  useIsomorphicLayoutEffect(() => {\n    if (shouldResizeOnWindowResize) {\n      window.addEventListener('resize', handleResize)\n      return () => {\n        window.removeEventListener('resize', handleResize)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shouldResizeOnWindowResize])\n  useIsomorphicLayoutEffect(() => {\n    if (carouselTrackWrapperRef.current) {\n      if (carouselSlideAxisRef.current === 'x') {\n        carouselTrackWrapperRef.current.style.top = '0px'\n      }\n      if (carouselSlideAxisRef.current === 'y') {\n        carouselTrackWrapperRef.current.style.left = '0px'\n      }\n    }\n  }, [carouselSlideAxis])\n  useIsomorphicLayoutEffect(() => {\n    fluidTotalWrapperScrollValue.current = getFluidWrapperScrollValue()\n    const itemsAreEqual = items.length === prevItems.current.length\n\n    if (!itemsAreEqual && items.length < prevItems.current.length) {\n      _slideToItem(items.length - 1)\n    }\n\n    prevItems.current = items\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getFluidWrapperScrollValue, items])\n\n  const contextProps = {\n    useListenToCustomEvent,\n    getIsFullscreen,\n    enterFullscreen,\n    exitFullscreen,\n    getIsAnimating,\n    getIsDragging,\n    getIsNextItem,\n    getIsPrevItem,\n    slideToPrevItem() {\n      slideToPrevItem()\n    },\n    slideToNextItem() {\n      slideToNextItem()\n    },\n    ...(slideType === 'fixed'\n      ? {\n          slideToItem: _slideToItem,\n          getIsActiveItem: (id: string) => {\n            return findItemIndex(id) === getCurrentActiveItem()\n          },\n          getCurrentActiveItem: () => ({\n            id: items[getCurrentActiveItem()].id,\n            index: getCurrentActiveItem(),\n          }),\n        }\n      : {}),\n  }\n\n  const handleCarouselFragmentRef = (ref: HTMLDivElement | null) => {\n    if (ref) {\n      carouselTrackWrapperRef.current = ref\n      adjustCarouselWrapperPosition(ref, initialActiveItemRef.current)\n    }\n  }\n\n  function getInitialStyles() {\n    const totalValue = (items.length / itemsPerSlide) * 100\n    const singleItemValue = 100 / itemsPerSlide\n    const cssProp = carouselSlideAxisRef.current === 'x' ? 'left' : 'y'\n    const quantityToMove = Math.floor(50 / singleItemValue)\n\n    if (slideType === 'fixed') {\n      if (initialStartingPositionRef.current === 'center') {\n        return {\n          [cssProp]: `calc(-${totalValue}% + ${singleItemValue * quantityToMove}%)`,\n        }\n      }\n      if (initialStartingPositionRef.current === 'end') {\n        return {\n          [cssProp]: `calc(-${totalValue}% + ${singleItemValue * (quantityToMove * 2)}%)`,\n        }\n      }\n    }\n    return {\n      [cssProp]: `0px`,\n    }\n  }\n\n  const carouselFragment = (\n    <Context.Provider value={contextProps}>\n      <div\n        ref={mainCarouselWrapperRef}\n        className=\"use-spring-carousel-main-wrapper\"\n        data-testid=\"use-spring-carousel-wrapper\"\n        {...getWheelEvent()}\n        // @ts-ignore\n        style={{\n          display: 'flex',\n          position: 'relative',\n          width: '100%',\n          height: '100%',\n          ...getOverflowStyles(),\n        }}\n      >\n        <animated.div\n          {...bindDrag()}\n          className=\"use-spring-carousel-track-wrapper\"\n          data-testid=\"use-spring-carousel-animated-wrapper\"\n          ref={handleCarouselFragmentRef}\n          style={{\n            display: 'flex',\n            position: 'relative',\n            touchAction: getTouchAction(),\n            flexDirection: carouselSlideAxisRef.current === 'x' ? 'row' : 'column',\n            ...getAnimatedWrapperStyles(),\n            ...getInitialStyles(),\n            ...(freeScroll ? {} : carouselStyles),\n          }}\n        >\n          {internalItems.map(({ id, renderItem }, index) => {\n            return (\n              <div\n                key={`${id}-${index}`}\n                className=\"use-spring-carousel-item\"\n                data-testid=\"use-spring-carousel-item-wrapper\"\n                style={{\n                  display: 'flex',\n                  position: 'relative',\n                  ...getItemStyles(itemsPerSlideRef.current),\n                }}\n              >\n                {renderItem}\n              </div>\n            )\n          })}\n        </animated.div>\n      </div>\n    </Context.Provider>\n  )\n  const thumbsFragment = (\n    <Context.Provider value={contextProps}>{_thumbsFragment}</Context.Provider>\n  )\n\n  return {\n    ...contextProps,\n    carouselFragment,\n    thumbsFragment,\n  }\n}\n\nfunction useSpringCarouselContext<T = 'fixed' | 'fluid'>() {\n  const context = useContext(Context)\n  if (!context) {\n    throw new Error(\n      'useSpringCarouselContext must be used only inside a component that is rendered inside the Carousel.',\n    )\n  }\n  return context as ContextTypes<T>\n}\n\nexport { useSpringCarousel, useSpringCarouselContext }\n","import { createContext, useRef, useState, useContext } from 'react'\nimport { useTransition, animated, config } from 'react-spring'\nimport { useDrag } from '@use-gesture/react'\nimport { useCustomEventsModule, useThumbsModule, useFullscreenModule } from '../modules'\nimport { SlideActionType } from '../types'\nimport {\n  UseTransitionCarouselContextProps,\n  UseTransitionCarouselProps,\n} from '../types/useTransitionCarousel'\nimport { ReactSpringCarouselItemWithThumbs } from '../types/useSpringCarousel'\n\nconst UseTransitionCarouselContext = createContext<\n  UseTransitionCarouselContextProps | undefined\n>(undefined)\n\nfunction useTransitionCarouselContext() {\n  const context = useContext(UseTransitionCarouselContext)\n\n  if (!context) {\n    throw new Error(`useTransitionCarouselContext isn't being used within the useTransitionCarousel context; \n    use the context only inside a component that is rendered within the Carousel.`)\n  }\n\n  return context\n}\n\nfunction useTransitionCarousel({\n  items,\n  withLoop = false,\n  withThumbs = false,\n  springConfig = config.default,\n  thumbsSlideAxis = 'x',\n  enableThumbsWrapperScroll = true,\n  draggingSlideTreshold = 50,\n  prepareThumbsData,\n  toPrevItemSpringProps,\n  toNextItemSpringProps,\n  disableGestures = false,\n  trail,\n  exitBeforeEnter = false,\n  springAnimationProps = {\n    initial: {\n      opacity: 1,\n      position: 'absolute',\n    },\n    from: {\n      opacity: 0,\n      position: 'absolute',\n    },\n    enter: {\n      opacity: 1,\n      position: 'absolute',\n    },\n    leave: {\n      opacity: 0,\n      position: 'absolute',\n    },\n  },\n}: UseTransitionCarouselProps) {\n  const slideActionType = useRef<SlideActionType>('next')\n  const mainCarouselWrapperRef = useRef<HTMLDivElement | null>(null)\n  const isAnimating = useRef(false)\n  const [activeItem, setActiveItem] = useState(0)\n\n  const { emitObservable, useListenToCustomEvent } =\n    useCustomEventsModule<'use-transition'>()\n  const { enterFullscreen, exitFullscreen, getIsFullscreen } = useFullscreenModule({\n    emitObservable,\n    mainCarouselWrapperRef,\n  })\n  const { thumbsFragment: _thumbsFragment, handleThumbsScroll } = useThumbsModule({\n    items: items as ReactSpringCarouselItemWithThumbs[],\n    withThumbs,\n    thumbsSlideAxis,\n    springConfig,\n    prepareThumbsData,\n    slideType: 'fixed',\n  })\n\n  const bindSwipe = useDrag(\n    ({ last, movement: [mx] }) => {\n      if (getIsAnimating()) {\n        return\n      }\n\n      if (last) {\n        const prevItemTreshold = mx > draggingSlideTreshold\n        const nextItemTreshold = mx < -draggingSlideTreshold\n        const isFirstItem = activeItem === 0\n        const isLastItem = activeItem === items.length - 1\n\n        if (nextItemTreshold) {\n          if (!withLoop && isLastItem) {\n            return\n          }\n\n          slideToNextItem()\n          emitObservable({\n            eventName: 'onLeftSwipe',\n          })\n        } else if (prevItemTreshold) {\n          if (!withLoop && isFirstItem) {\n            return\n          }\n\n          slideToPrevItem()\n          emitObservable({\n            eventName: 'onRightSwipe',\n          })\n        }\n      }\n    },\n    {\n      enabled: !disableGestures,\n    },\n  )\n\n  function getTransitionConfig() {\n    const slideActionType = getSlideActionType()\n\n    if (slideActionType === 'prev' && toPrevItemSpringProps) {\n      return {\n        initial: {\n          ...springAnimationProps.initial,\n        },\n        from: {\n          ...toPrevItemSpringProps.from,\n        },\n        enter: {\n          ...toPrevItemSpringProps.enter,\n        },\n        leave: {\n          ...toPrevItemSpringProps.leave,\n        },\n      }\n    }\n\n    if (slideActionType === 'next' && toNextItemSpringProps) {\n      return {\n        initial: {\n          ...springAnimationProps.initial,\n        },\n        from: {\n          ...toNextItemSpringProps.from,\n        },\n        enter: {\n          ...toNextItemSpringProps.enter,\n        },\n        leave: {\n          ...toNextItemSpringProps.leave,\n        },\n      }\n    }\n\n    return {\n      initial: {\n        ...springAnimationProps.initial,\n      },\n      from: {\n        ...springAnimationProps.from,\n      },\n      enter: {\n        ...springAnimationProps.enter,\n      },\n      leave: {\n        ...springAnimationProps.leave,\n      },\n    }\n  }\n\n  const transitions = useTransition(activeItem, {\n    config: springConfig,\n    ...getTransitionConfig(),\n    onStart: () => setIsAnimating(true),\n    trail,\n    exitBeforeEnter,\n    key: items[activeItem].id,\n    onRest: val => {\n      if (val.finished) {\n        setIsAnimating(false)\n        emitObservable({\n          eventName: 'onSlideChange',\n          slideActionType: getSlideActionType(),\n          currentItem: {\n            index: activeItem,\n            id: items[activeItem].id,\n          },\n        })\n      }\n    },\n  })\n  const itemsFragment = transitions((styles, item) => (\n    <animated.div\n      style={{\n        ...styles,\n        flex: '1 0 100%',\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      {items[item].renderItem}\n    </animated.div>\n  ))\n\n  function getIsAnimating() {\n    return isAnimating.current\n  }\n  function setIsAnimating(val: boolean) {\n    isAnimating.current = val\n  }\n  function setSlideActionType(type: SlideActionType) {\n    slideActionType.current = type\n  }\n  function getSlideActionType() {\n    return slideActionType.current\n  }\n  function slideToItem(item: string | number) {\n    let itemIndex = 0\n\n    if (typeof item === 'string') {\n      itemIndex = items.findIndex(_item => _item.id === item)\n    } else {\n      itemIndex = item\n    }\n\n    if (itemIndex >= items.length) {\n      throw Error(\n        `The item you want to slide to doesn't exist. This could be due to the fact that \n        you provide a wrong id or a higher numeric index.`,\n      )\n    }\n\n    if (itemIndex === activeItem) {\n      return\n    }\n\n    const currentItem = findItemIndex(items[activeItem].id)\n    const newActiveItem = findItemIndex(items[itemIndex].id)\n\n    emitObservable({\n      eventName: 'onSlideStartChange',\n      slideActionType: getSlideActionType(),\n      nextItem: {\n        index: newActiveItem,\n        id: items[itemIndex].id,\n      },\n    })\n\n    if (newActiveItem > currentItem) {\n      setSlideActionType('next')\n    } else {\n      setSlideActionType('prev')\n    }\n\n    setActiveItem(itemIndex)\n\n    if (enableThumbsWrapperScroll && withThumbs) {\n      handleThumbsScroll(itemIndex)\n    }\n  }\n  function slideToNextItem() {\n    const isLastItem = activeItem === items.length - 1\n\n    if (withLoop) {\n      setSlideActionType('next')\n      if (isLastItem) {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: 0,\n            id: items[0].id,\n          },\n        })\n        setActiveItem(0)\n      } else {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: activeItem + 1,\n            id: items[activeItem + 1].id,\n          },\n        })\n        setActiveItem(activeItem + 1)\n      }\n    } else {\n      if (!isLastItem) {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: activeItem + 1,\n            id: items[activeItem + 1].id,\n          },\n        })\n        setSlideActionType('next')\n        setActiveItem(activeItem + 1)\n      }\n    }\n  }\n  function slideToPrevItem() {\n    const isFirstItem = activeItem === 0\n\n    if (withLoop) {\n      setSlideActionType('prev')\n      if (isFirstItem) {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: items.length - 1,\n            id: items[items.length - 1].id,\n          },\n        })\n\n        setActiveItem(items.length - 1)\n      } else {\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: activeItem - 1,\n            id: items[activeItem - 1].id,\n          },\n        })\n        setActiveItem(activeItem - 1)\n      }\n    } else {\n      if (!isFirstItem) {\n        setSlideActionType('prev')\n        emitObservable({\n          eventName: 'onSlideStartChange',\n          slideActionType: getSlideActionType(),\n          nextItem: {\n            index: activeItem - 1,\n            id: items[activeItem - 1].id,\n          },\n        })\n        setActiveItem(activeItem - 1)\n      }\n    }\n  }\n  function findItemIndex(id: string) {\n    return items.findIndex(item => item.id === id)\n  }\n  function getIsNextItem(id: string) {\n    const itemIndex = findItemIndex(id)\n\n    if (withLoop && activeItem === items.length - 1) {\n      return itemIndex === 0\n    }\n\n    return itemIndex === activeItem + 1\n  }\n  function getIsPrevItem(id: string) {\n    const itemIndex = findItemIndex(id)\n\n    if (withLoop && activeItem === 0) {\n      return itemIndex === items.length - 1\n    }\n\n    return itemIndex === activeItem - 1\n  }\n\n  const contextProps: UseTransitionCarouselContextProps = {\n    activeItem,\n    slideToItem,\n    slideToNextItem,\n    slideToPrevItem,\n    enterFullscreen,\n    exitFullscreen,\n    useListenToCustomEvent,\n    getIsNextItem,\n    getIsPrevItem,\n    getIsAnimating,\n    getIsFullscreen,\n    getIsActiveItem: id => {\n      return findItemIndex(id) === activeItem\n    },\n    getCurrentActiveItem: () => ({\n      id: items[activeItem].id,\n      index: activeItem,\n    }),\n  }\n\n  const carouselFragment = (\n    <UseTransitionCarouselContext.Provider value={contextProps}>\n      <div\n        ref={mainCarouselWrapperRef}\n        {...bindSwipe()}\n        style={{\n          display: 'flex',\n          position: 'relative',\n          width: '100%',\n          height: '100%',\n          overflow: 'hidden',\n        }}\n      >\n        {itemsFragment}\n      </div>\n    </UseTransitionCarouselContext.Provider>\n  )\n\n  const thumbsFragment = (\n    <UseTransitionCarouselContext.Provider value={contextProps}>\n      {_thumbsFragment}\n    </UseTransitionCarouselContext.Provider>\n  )\n\n  return {\n    carouselFragment,\n    thumbsFragment,\n    ...contextProps,\n  }\n}\n\nexport { useTransitionCarouselContext, useTransitionCarousel }\n"],"names":["useCustomEventsModule","eventsObserverRef","useRef","Subject","useListenToCustomEvent","fn","useEffect","subscribe","current","unsubscribe","emitObservable","data","next","useIsomorphicLayoutEffect","window","useLayoutEffect","useIsomorphicMount","callback","isMounted","clean","useFullscreenModule","mainCarouselWrapperRef","handleResize","isFullscreen","setIsFullscreen","_isFullscreen","handleFullscreenChange","document","fullscreenElement","eventName","screenfull","isEnabled","on","off","enterFullscreen","elementRef","request","exitFullscreen","exit","getIsFullscreen","useThumbsModule","items","withThumbs","thumbsSlideAxis","springConfig","prepareThumbsData","getFluidWrapperScrollValue","getSlideValue","slideType","internalThumbsWrapperRef","thumbListStyles","setThumbListStyles","useSpring","x","y","config","onChange","value","Math","abs","getCurrentThumbScrollValue","getThumbsTotalScrollableValue","round","Number","getBoundingClientRect","getThumbSlideValue","thumbSlideTotal","Error","thumbsFragment","_jsx","animated","div","ref","className","onWheel","stop","style","display","flex","position","width","height","flexDirection","overflowX","overflowY","maxHeight","getPreparedItems","_items","map","i","id","renderThumb","handlePrepareThumbsData","thumbId","handleThumbsScroll","activeItem","actionType","totalScrollableValue","nextValue","start","from","[object Object]","to","thumbNode","querySelector","thumbWrapper","offsetDimension","scrollDirection","thumbOffsetPosition","offsetDirection","getThumbOffsetPosition","thumbScrollDimension","getThumbScrollDimension","fromValue","getScrollFromValue","toValue","scrollDimensionProperty","length","getScrollToValue","scrollLeft","scrollTop","Context","createContext","undefined","defaultDragSpringConfig","default","mass","velocity","UseTransitionCarouselContext","withLoop","draggingSlideTreshold","shouldResizeOnWindowResize","enableThumbsWrapperScroll","slideWhenThresholdIsReached","carouselSlideAxis","initialActiveItem","initialStartingPosition","disableGestures","gutter","startEndGutter","touchAction","slideAmount","freeScroll","enableFreeScrollDrag","itemsPerSlide","isFirstMount","slideActionType","internalItems","carouselTrackWrapperRef","isDragging","isAnimating","windowIsHidden","fluidTotalWrapperScrollValue","slideEndReached","currentWindowWidth","initialWindowWidth","prevSlidedValue","prevItems","draggingSlideTresholdRef","itemsPerSlideRef","gutterRef","startEndGutterRef","initialActiveItemRef","initialStartingPositionRef","carouselSlideAxisRef","carouselStyles","setCarouselStyles","getCarouselItemWidth","carouselItem","getCurrentSlidedValue","get","getIfItemsNotFillTheCarousel","getMainCarouselWrapperWidth","getIsFirstItem","getCurrentActiveItem","itemVal","adjustCarouselWrapperPosition","_initialActiveItem","positionProperty","getDefaultPositionValue","setPosition","v","top","left","setStartPosition","setEndPosition","resize","innerWidth","immediate","floor","_thumbsFragment","getWrapperScrollDirection","getIfShouldEnableFluidDrag","bindDrag","useDrag","props","dragging","movement","offset","currentMovement","prevItemTreshold","nextItemTreshold","direction","cancelDrag","cancel","setDragDirection","setSlideActionType","emitDragObservable","getSlideActionType","resetAnimation","checkBounds","getIsDragging","setIsDragging","friction","tension","last","slideToPrevItem","slideToNextItem","getIsLastItem","enabled","axis","type","setActiveItem","newItem","setIsAnimating","val","getPrevItem","currentActiveItem","getNextItem","findItemIndex","findIndex","item","getToValue","customTo","slideToItem","onRest","nextItem","index","getFromValue","finished","currentItem","nextPrevValue","nextItemWillExceed","willExceed","currentWidth","_slideToItem","itemIndex","_item","console","warn","handleVisibilityChange","hidden","addEventListener","removeEventListener","contextProps","getIsAnimating","getIsNextItem","getIsPrevItem","getIsActiveItem","carouselFragment","Provider","percentValue","getAnimatedWrapperStyles","totalValue","singleItemValue","cssProp","quantityToMove","getInitialStyles","renderItem","_itemsPerSlide","marginRight","marginBottom","context","useContext","toPrevItemSpringProps","toNextItemSpringProps","trail","exitBeforeEnter","springAnimationProps","initial","opacity","enter","leave","useState","bindSwipe","mx","isFirstItem","isLastItem","itemsFragment","useTransition","getTransitionConfig","onStart","key","transitions","styles","newActiveItem","overflow"],"mappings":"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"}